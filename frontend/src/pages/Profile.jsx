import React, { useState, useEffect } from 'react';import { useNavigate } from 'react-router-dom';import {  Box,  Container,  Paper,  Typography,  Avatar,  Grid,  TextField,  Button,  Divider,  Alert,  CircularProgress,} from '@mui/material';import { styled } from '@mui/material/styles';import { Edit as EditIcon, Save as SaveIcon } from '@mui/icons-material';import { useAuth } from '../hooks/useAuth';import axios from 'axios';const StyledPaper = styled(Paper)(({ theme }) => ({  padding: theme.spacing(4),  marginTop: theme.spacing(4),  borderRadius: theme.spacing(2),  boxShadow: '0 4px 20px rgba(0, 0, 0, 0.1)',}));const LargeAvatar = styled(Avatar)(({ theme }) => ({  width: theme.spacing(12),  height: theme.spacing(12),  marginBottom: theme.spacing(2),  backgroundColor: theme.palette.primary.main,  fontSize: '2.5rem',}));const Profile = () => {  const navigate = useNavigate();  const { user } = useAuth();  const [isEditing, setIsEditing] = useState(false);  const [error, setError] = useState('');  const [success, setSuccess] = useState('');  const [loading, setLoading] = useState(false);  const [profileData, setProfileData] = useState({    firstName: '',    lastName: '',    email: '',    phone: '',    role: '',    specialty: '',    licenseNumber: '',  });  useEffect(() => {    const token = localStorage.getItem('token');    if (!token) {      navigate('/login');      return;    }    const fetchProfile = async () => {      try {        const response = await axios.get(`/api/${user.role}/profile`, {          headers: { Authorization: `Bearer ${token}` }        });        setProfileData({          firstName: response.data.firstName || '',          lastName: response.data.lastName || '',          email: response.data.email || '',          phone: response.data.phone || '',          role: response.data.role || user.role || '',          specialty: response.data.specialty || '',          licenseNumber: response.data.licenseNumber || '',        });      } catch (error) {        if (error.response?.status === 401) {          localStorage.removeItem('token');          localStorage.removeItem('role');          navigate('/login');        } else {          setError('Failed to fetch profile data');        }      }    };    fetchProfile();  }, [user, navigate]);  const handleEdit = () => {    setIsEditing(!isEditing);    setError('');    setSuccess('');  };  const handleSave = async () => {    try {      setLoading(true);      setError('');      const token = localStorage.getItem('token');      const response = await axios.put(        `/api/${user.role}/profile`,        profileData,        { headers: { Authorization: `Bearer ${token}` } }      );      setSuccess('Profile updated successfully');      setIsEditing(false);    } catch (err) {      setError(err.response?.data?.error || 'Failed to update profile');      if (err.response?.status === 401) {        localStorage.removeItem('token');        localStorage.removeItem('role');        navigate('/login');      }    } finally {      setLoading(false);    }  };  const handleChange = (e) => {    setProfileData({      ...profileData,      [e.target.name]: e.target.value,    });    setError('');  };  const getInitials = () => {    return `${profileData.firstName?.[0] || ''}${profileData.lastName?.[0] || ''}`.toUpperCase();  };  const renderDoctorFields = () => (    <>      <Grid item xs={12} sm={6}>        <TextField          fullWidth          label="Specialty"          name="specialty"          value={profileData.specialty}          onChange={handleChange}          disabled={!isEditing}          variant="outlined"        />      </Grid>      <Grid item xs={12} sm={6}>        <TextField          fullWidth          label="License Number"          name="licenseNumber"          value={profileData.licenseNumber}          onChange={handleChange}          disabled={!isEditing}          variant="outlined"        />      </Grid>    </>  );  return (    <Container maxWidth="md">      <StyledPaper elevation={3}>        {error && (          <Alert severity="error" sx={{ mb: 2 }}>            {error}          </Alert>        )}        {success && (          <Alert severity="success" sx={{ mb: 2 }}>            {success}          </Alert>        )}        <Box display="flex" flexDirection="column" alignItems="center" mb={4}>          <LargeAvatar>{getInitials()}</LargeAvatar>          <Typography variant="h4" gutterBottom>            {`${profileData.firstName} ${profileData.lastName}`}          </Typography>          <Typography variant="subtitle1" color="textSecondary" sx={{ textTransform: 'capitalize' }}>            {profileData.role}          </Typography>        </Box>        <Divider sx={{ my: 3 }} />        <Grid container spacing={3}>          <Grid item xs={12} sm={6}>            <TextField              fullWidth              label="First Name"              name="firstName"              value={profileData.firstName}              onChange={handleChange}              disabled={!isEditing}              variant="outlined"              required            />          </Grid>          <Grid item xs={12} sm={6}>            <TextField              fullWidth              label="Last Name"              name="lastName"              value={profileData.lastName}              onChange={handleChange}              disabled={!isEditing}              variant="outlined"              required            />          </Grid>          <Grid item xs={12} sm={6}>            <TextField              fullWidth              label="Email"              name="email"              value={profileData.email}              onChange={handleChange}              disabled={true}              variant="outlined"              helperText="Email cannot be changed"            />          </Grid>          <Grid item xs={12} sm={6}>            <TextField              fullWidth              label="Phone"              name="phone"              value={profileData.phone}              onChange={handleChange}              disabled={!isEditing}              variant="outlined"            />          </Grid>          {profileData.role === 'doctor' && renderDoctorFields()}          <Grid item xs={12}>            <TextField              fullWidth              label="Role"              name="role"              value={profileData.role}              disabled={true}              variant="outlined"              sx={{ textTransform: 'capitalize' }}              helperText="Role cannot be changed"            />          </Grid>        </Grid>        <Box display="flex" justifyContent="flex-end" mt={4}>          <Button            variant="contained"            color={isEditing ? 'primary' : 'secondary'}            startIcon={isEditing ? <SaveIcon /> : <EditIcon />}            onClick={isEditing ? handleSave : handleEdit}            disabled={loading}            sx={{ borderRadius: 2 }}          >            {loading ? (              <>                <CircularProgress size={20} sx={{ mr: 1 }} />                Saving...              </>            ) : (              isEditing ? 'Save Changes' : 'Edit Profile'            )}          </Button>        </Box>      </StyledPaper>    </Container>  );};export default Profile; 