import React, { useState, useEffect } from 'react';import {  Container,  Paper,  Typography,  Box,  Grid,  Card,  CardContent,  Button,  Alert,  Chip,  Dialog,  DialogTitle,  DialogContent,  DialogActions,  TextField,} from '@mui/material';import { styled } from '@mui/material/styles';import { Calendar, Clock, User, AlertCircle } from 'lucide-react';import { useAuth } from '../../hooks/useAuth';import axios from 'axios';import { format } from 'date-fns';const StyledPaper = styled(Paper)(({ theme }) => ({  padding: theme.spacing(4),  marginTop: theme.spacing(4),  borderRadius: theme.spacing(2),  boxShadow: '0 4px 20px rgba(0, 0, 0, 0.1)',}));const AppointmentCard = styled(Card)(({ theme }) => ({  marginBottom: theme.spacing(2),  borderRadius: theme.spacing(2),  boxShadow: '0 2px 8px rgba(0, 0, 0, 0.05)',}));const StatusChip = styled(Chip)(({ theme, status }) => ({  borderRadius: theme.spacing(1),  fontWeight: 500,  backgroundColor:     status === 'confirmed' ? theme.palette.success.light :    status === 'pending' ? theme.palette.warning.light :    status === 'cancelled' ? theme.palette.error.light :    theme.palette.grey[100],  color:     status === 'confirmed' ? theme.palette.success.dark :    status === 'pending' ? theme.palette.warning.dark :    status === 'cancelled' ? theme.palette.error.dark :    theme.palette.grey[800],}));const MyAppointments = () => {  const { user } = useAuth();  const [appointments, setAppointments] = useState([]);  const [loading, setLoading] = useState(true);  const [error, setError] = useState('');  const [success, setSuccess] = useState('');  const [selectedAppointment, setSelectedAppointment] = useState(null);  const [cancelDialogOpen, setCancelDialogOpen] = useState(false);  const [cancelReason, setCancelReason] = useState('');  useEffect(() => {    fetchAppointments();  }, []);  const fetchAppointments = async () => {    try {      const token = localStorage.getItem('token');      if (!token) {        setError('You are not authenticated. Please log in again.');        return;      }      const response = await axios.get('/api/patient/appointments', {        headers: {          'Authorization': `Bearer ${token}`        }      });      setAppointments(response.data);    } catch (err) {      const errorMessage = err.response?.data?.error || 'Failed to fetch appointments';      setError(errorMessage);      if (err.response?.status === 401) {        localStorage.removeItem('token');        localStorage.removeItem('role');        window.location.href = '/login';      }    } finally {      setLoading(false);    }  };  const handleCancelClick = (appointment) => {    setSelectedAppointment(appointment);    setCancelDialogOpen(true);  };  const handleCancelConfirm = async () => {    if (!cancelReason.trim()) {      setError('Please provide a reason for cancellation');      return;    }    try {      const token = localStorage.getItem('token');      if (!token) {        setError('You are not authenticated. Please log in again.');        return;      }      await axios.put(`/api/patient/appointments/${selectedAppointment._id}/cancel`,         { cancelReason: cancelReason.trim() },        {          headers: {            'Authorization': `Bearer ${token}`          }        }      );      setSuccess('Appointment cancelled successfully');      await fetchAppointments();       handleCancelDialogClose();    } catch (err) {      const errorMessage = err.response?.data?.error || 'Failed to cancel appointment';      setError(errorMessage);      if (err.response?.status === 401) {        localStorage.removeItem('token');        localStorage.removeItem('role');        window.location.href = '/login';      }    }  };  const handleCancelDialogClose = () => {    setCancelDialogOpen(false);    setSelectedAppointment(null);    setCancelReason('');  };  const getStatusColor = (status) => {    switch (status.toLowerCase()) {      case 'confirmed':        return 'success';      case 'pending':        return 'warning';      case 'cancelled':        return 'error';      default:        return 'default';    }  };  if (loading) {    return (      <Container maxWidth="lg">        <Typography>Loading appointments...</Typography>      </Container>    );  }  return (    <Container maxWidth="lg">      <Typography variant="h4" gutterBottom>        My Appointments      </Typography>      {error && (        <Alert severity="error" sx={{ mb: 2 }}>          {error}        </Alert>      )}      {success && (        <Alert severity="success" sx={{ mb: 2 }}>          {success}        </Alert>      )}      <StyledPaper>        {appointments.length === 0 ? (          <Box textAlign="center" py={4}>            <AlertCircle size={48} color="#666" style={{ marginBottom: 16 }} />            <Typography variant="h6" color="textSecondary">              No appointments found            </Typography>            <Button              variant="contained"              color="primary"              href="/patient/book-appointment"              sx={{ mt: 2 }}            >              Book an Appointment            </Button>          </Box>        ) : (          <Grid container spacing={3}>            {appointments.map((appointment) => (              <Grid item xs={12} key={appointment._id}>                <AppointmentCard>                  <CardContent>                    <Grid container spacing={2} alignItems="center">                      <Grid item xs={12} sm={4}>                        <Box display="flex" alignItems="center">                          <User size={20} style={{ marginRight: 8 }} />                          <Box>                            <Typography variant="subtitle1">                              Dr. {appointment.doctorId?.firstName || ''} {appointment.doctorId?.lastName || ''}                            </Typography>                            <Typography variant="body2" color="textSecondary">                              {appointment.doctorId?.specialty || ''}                            </Typography>                          </Box>                        </Box>                      </Grid>                      <Grid item xs={12} sm={3}>                        <Box display="flex" alignItems="center">                          <Calendar size={20} style={{ marginRight: 8 }} />                          <Typography>                            {format(new Date(appointment.date), 'MMM dd, yyyy')}                          </Typography>                        </Box>                      </Grid>                      <Grid item xs={12} sm={2}>                        <Box display="flex" alignItems="center">                          <Clock size={20} style={{ marginRight: 8 }} />                          <Typography>{appointment.time}</Typography>                        </Box>                      </Grid>                      <Grid item xs={12} sm={3}>                        <Box display="flex" alignItems="center" justifyContent="flex-end">                          <StatusChip                            label={appointment.status}                            status={appointment.status.toLowerCase()}                            sx={{ mr: 1 }}                          />                          {appointment.status !== 'cancelled' && (                            <Button                              variant="outlined"                              color="error"                              size="small"                              onClick={() => handleCancelClick(appointment)}                            >                              Cancel                            </Button>                          )}                        </Box>                      </Grid>                    </Grid>                  </CardContent>                </AppointmentCard>              </Grid>            ))}          </Grid>        )}      </StyledPaper>      <Dialog open={cancelDialogOpen} onClose={handleCancelDialogClose}>        <DialogTitle>Cancel Appointment</DialogTitle>        <DialogContent>          <Typography gutterBottom>            Are you sure you want to cancel this appointment?          </Typography>          <TextField            fullWidth            label="Reason for Cancellation"            multiline            rows={3}            value={cancelReason}            onChange={(e) => setCancelReason(e.target.value)}            sx={{ mt: 2 }}          />        </DialogContent>        <DialogActions>          <Button onClick={handleCancelDialogClose}>No, Keep It</Button>          <Button onClick={handleCancelConfirm} color="error" variant="contained">            Yes, Cancel          </Button>        </DialogActions>      </Dialog>    </Container>  );};export default MyAppointments; 