import React, { useState, useEffect } from 'react';import {  Container,  Grid,  Paper,  Typography,  Box,  Card,  CardContent,  Avatar,  Chip,  IconButton,  Dialog,  DialogTitle,  DialogContent,  DialogActions,  Button,  TextField,  Alert,  LinearProgress,  MenuItem,} from '@mui/material';import { Edit as EditIcon, Delete as DeleteIcon, Phone as PhoneIcon, Mail as MailIcon } from '@mui/icons-material';import axios from 'axios';import { useNavigate } from 'react-router-dom';const specialties = [  'Cardiology',  'Dermatology',  'Endocrinology',  'Gastroenterology',  'Neurology',  'Oncology',  'Pediatrics',  'Psychiatry',  'Orthopedics',  'General Medicine',];const DoctorsList = () => {  const [doctors, setDoctors] = useState([]);  const [loading, setLoading] = useState(true);  const [error, setError] = useState('');  const [openEdit, setOpenEdit] = useState(false);  const [selectedDoctor, setSelectedDoctor] = useState(null);  const [openDelete, setOpenDelete] = useState(false);  const navigate = useNavigate();  useEffect(() => {    fetchDoctors();  }, []);  const fetchDoctors = async () => {    try {      console.log('Fetching doctors list...');      const token = localStorage.getItem('token');      const response = await axios.get('/api/admin/doctors', {        headers: { Authorization: `Bearer ${token}` },      });      console.log('Fetched doctors:', response.data);      setDoctors(response.data);      setError('');    } catch (error) {      console.error('Error fetching doctors:', error.response || error);      setError(error.response?.data?.error || 'Error fetching doctors');      if (error.response?.status === 401) {        navigate('/login');      }    } finally {      setLoading(false);    }  };  const handleEdit = (doctor) => {    setSelectedDoctor(doctor);    setOpenEdit(true);  };  const handleDelete = (doctor) => {    setSelectedDoctor(doctor);    setOpenDelete(true);  };  const handleUpdateDoctor = async () => {    try {      const token = localStorage.getItem('token');      await axios.put(        `/api/admin/doctors/${selectedDoctor._id}`,        selectedDoctor,        {          headers: { Authorization: `Bearer ${token}` },        }      );      setOpenEdit(false);      await fetchDoctors();     } catch (error) {      setError(error.response?.data?.error || 'Error updating doctor');    }  };  const handleDeleteDoctor = async () => {    try {      const token = localStorage.getItem('token');      await axios.delete(`/api/admin/doctors/${selectedDoctor._id}`, {        headers: { Authorization: `Bearer ${token}` },      });      setOpenDelete(false);      await fetchDoctors();     } catch (error) {      setError(error.response?.data?.error || 'Error deleting doctor');    }  };  if (loading) {    return (      <Container maxWidth="lg">        <Box sx={{ width: '100%', mt: 4 }}>          <LinearProgress />        </Box>      </Container>    );  }  return (    <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>      {error && (        <Alert severity="error" sx={{ mb: 4 }}>          {error}        </Alert>      )}      <Box display="flex" justifyContent="space-between" alignItems="center" mb={4}>        <Typography variant="h4" gutterBottom>          Doctors Directory        </Typography>      </Box>      <Grid container spacing={3}>        {doctors.map((doctor) => (          <Grid item xs={12} md={6} key={doctor._id}>            <Card>              <CardContent>                <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>                  <Avatar                    sx={{ width: 56, height: 56, mr: 2, bgcolor: 'primary.main' }}                  >                    {doctor.firstName[0]}                    {doctor.lastName[0]}                  </Avatar>                  <Box>                    <Typography variant="h6">                      Dr. {doctor.firstName} {doctor.lastName}                    </Typography>                    <Chip                      label={doctor.specialty}                      color="primary"                      size="small"                      sx={{ mt: 0.5 }}                    />                  </Box>                  <Box sx={{ ml: 'auto' }}>                    <IconButton onClick={() => handleEdit(doctor)}>                      <EditIcon />                    </IconButton>                    <IconButton onClick={() => handleDelete(doctor)}>                      <DeleteIcon />                    </IconButton>                  </Box>                </Box>                <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>                  <MailIcon sx={{ mr: 1, color: 'text.secondary' }} />                  <Typography variant="body2">{doctor.email}</Typography>                </Box>                <Box sx={{ display: 'flex', alignItems: 'center' }}>                  <PhoneIcon sx={{ mr: 1, color: 'text.secondary' }} />                  <Typography variant="body2">{doctor.phoneNumber}</Typography>                </Box>                <Typography variant="body2" color="text.secondary" sx={{ mt: 2 }}>                  License: {doctor.licenseNumber}                </Typography>              </CardContent>            </Card>          </Grid>        ))}      </Grid>      {}      <Dialog open={openEdit} onClose={() => setOpenEdit(false)} maxWidth="sm" fullWidth>        <DialogTitle>Edit Doctor Details</DialogTitle>        <DialogContent>          <Grid container spacing={2} sx={{ mt: 1 }}>            <Grid item xs={12} sm={6}>              <TextField                fullWidth                label="First Name"                value={selectedDoctor?.firstName || ''}                onChange={(e) =>                  setSelectedDoctor({ ...selectedDoctor, firstName: e.target.value })                }              />            </Grid>            <Grid item xs={12} sm={6}>              <TextField                fullWidth                label="Last Name"                value={selectedDoctor?.lastName || ''}                onChange={(e) =>                  setSelectedDoctor({ ...selectedDoctor, lastName: e.target.value })                }              />            </Grid>            <Grid item xs={12}>              <TextField                fullWidth                label="Email"                value={selectedDoctor?.email || ''}                onChange={(e) =>                  setSelectedDoctor({ ...selectedDoctor, email: e.target.value })                }              />            </Grid>            <Grid item xs={12}>              <TextField                fullWidth                select                label="Specialty"                value={selectedDoctor?.specialty || ''}                onChange={(e) =>                  setSelectedDoctor({ ...selectedDoctor, specialty: e.target.value })                }              >                {specialties.map((specialty) => (                  <MenuItem key={specialty} value={specialty}>                    {specialty}                  </MenuItem>                ))}              </TextField>            </Grid>            <Grid item xs={12} sm={6}>              <TextField                fullWidth                label="License Number"                value={selectedDoctor?.licenseNumber || ''}                onChange={(e) =>                  setSelectedDoctor({ ...selectedDoctor, licenseNumber: e.target.value })                }              />            </Grid>            <Grid item xs={12} sm={6}>              <TextField                fullWidth                label="Phone Number"                value={selectedDoctor?.phoneNumber || ''}                onChange={(e) =>                  setSelectedDoctor({ ...selectedDoctor, phoneNumber: e.target.value })                }              />            </Grid>          </Grid>        </DialogContent>        <DialogActions>          <Button onClick={() => setOpenEdit(false)}>Cancel</Button>          <Button variant="contained" onClick={handleUpdateDoctor}>            Save Changes          </Button>        </DialogActions>      </Dialog>      {}      <Dialog open={openDelete} onClose={() => setOpenDelete(false)}>        <DialogTitle>Confirm Delete</DialogTitle>        <DialogContent>          <Typography>            Are you sure you want to delete Dr. {selectedDoctor?.firstName}{' '}            {selectedDoctor?.lastName}?          </Typography>        </DialogContent>        <DialogActions>          <Button onClick={() => setOpenDelete(false)}>Cancel</Button>          <Button variant="contained" color="error" onClick={handleDeleteDoctor}>            Delete          </Button>        </DialogActions>      </Dialog>    </Container>  );};export default DoctorsList; 