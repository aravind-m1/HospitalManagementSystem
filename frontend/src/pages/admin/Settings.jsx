import React, { useState, useEffect } from 'react';import {  Container,  Grid,  Typography,  Box,  TextField,  Button,  Switch,  FormControlLabel,  Alert,  CircularProgress,  Card,  CardContent,} from '@mui/material';import {  Save as SaveIcon,  Notifications,  Security,  Person,} from '@mui/icons-material';import axios from 'axios';const Settings = () => {  const [loading, setLoading] = useState(true);  const [saving, setSaving] = useState(false);  const [error, setError] = useState('');  const [success, setSuccess] = useState('');  const [settings, setSettings] = useState({    profile: {      firstName: '',      lastName: '',      email: '',      phone: '',    },    notifications: {      emailNotifications: true,      appointmentReminders: true,      systemUpdates: true,    },    security: {      currentPassword: '',      newPassword: '',      confirmPassword: '',    }  });  useEffect(() => {    fetchSettings();  }, []);  const fetchSettings = async () => {    try {      const token = localStorage.getItem('token');      if (!token) {        setError('Authentication token not found');        return;      }      const headers = { Authorization: `Bearer ${token}` };      const profileResponse = await axios.get('/api/admin/profile', { headers });      setSettings(prevSettings => ({        ...prevSettings,        profile: {          firstName: profileResponse.data.firstName || '',          lastName: profileResponse.data.lastName || '',          email: profileResponse.data.email || '',          phone: profileResponse.data.phone || '',        }      }));      setError('');    } catch (error) {      console.error('Error fetching settings:', error);      setError(error.response?.data?.error || 'Failed to fetch settings');    } finally {      setLoading(false);    }  };  const handleProfileChange = (event) => {    const { name, value } = event.target;    setSettings(prev => ({      ...prev,      profile: {        ...prev.profile,        [name]: value      }    }));  };  const handleNotificationChange = (event) => {    const { name, checked } = event.target;    setSettings(prev => ({      ...prev,      notifications: {        ...prev.notifications,        [name]: checked      }    }));  };  const handleSecurityChange = (event) => {    const { name, value } = event.target;    setSettings(prev => ({      ...prev,      security: {        ...prev.security,        [name]: value      }    }));  };  const handleSubmit = async (section) => {    try {      setSaving(true);      setSuccess('');      setError('');      const token = localStorage.getItem('token');      const headers = { Authorization: `Bearer ${token}` };      let endpoint;      let data;      switch (section) {        case 'profile':          endpoint = '/api/admin/profile';          data = settings.profile;          break;        case 'notifications':          endpoint = '/api/admin/notification-settings';          data = settings.notifications;          break;        case 'security':          endpoint = '/api/admin/change-password';          data = settings.security;          if (data.newPassword !== data.confirmPassword) {            setError('New passwords do not match');            return;          }          break;        default:          return;      }      const response = await axios.put(endpoint, data, { headers });      if (response.data.message) {        setSuccess(response.data.message);      } else {        setSuccess(`${section.charAt(0).toUpperCase() + section.slice(1)} updated successfully`);      }      if (section === 'security') {        setSettings(prev => ({          ...prev,          security: {            currentPassword: '',            newPassword: '',            confirmPassword: '',          }        }));      }      if (section === 'profile') {        fetchSettings();      }    } catch (error) {      console.error('Error updating settings:', error);      setError(error.response?.data?.error || 'Failed to update settings');    } finally {      setSaving(false);    }  };  if (loading) {    return (      <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>        <Box display="flex" justifyContent="center" alignItems="center" minHeight="60vh">          <CircularProgress />        </Box>      </Container>    );  }  return (    <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>      <Typography variant="h4" gutterBottom>        Settings      </Typography>      {error && (        <Alert severity="error" sx={{ mb: 4 }}>          {error}        </Alert>      )}      {success && (        <Alert severity="success" sx={{ mb: 4 }}>          {success}        </Alert>      )}      <Grid container spacing={4}>        {}        <Grid item xs={12}>          <Card>            <CardContent>              <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>                <Person sx={{ mr: 2 }} />                <Typography variant="h6">Profile Settings</Typography>              </Box>              <Grid container spacing={3}>                <Grid item xs={12} sm={6}>                  <TextField                    fullWidth                    label="First Name"                    name="firstName"                    value={settings.profile.firstName}                    onChange={handleProfileChange}                  />                </Grid>                <Grid item xs={12} sm={6}>                  <TextField                    fullWidth                    label="Last Name"                    name="lastName"                    value={settings.profile.lastName}                    onChange={handleProfileChange}                  />                </Grid>                <Grid item xs={12} sm={6}>                  <TextField                    fullWidth                    label="Email"                    name="email"                    value={settings.profile.email}                    onChange={handleProfileChange}                  />                </Grid>                <Grid item xs={12} sm={6}>                  <TextField                    fullWidth                    label="Phone"                    name="phone"                    value={settings.profile.phone}                    onChange={handleProfileChange}                  />                </Grid>                <Grid item xs={12}>                  <Button                    variant="contained"                    startIcon={<SaveIcon />}                    onClick={() => handleSubmit('profile')}                    disabled={saving}                  >                    Save Profile                  </Button>                </Grid>              </Grid>            </CardContent>          </Card>        </Grid>        {}        <Grid item xs={12} md={6}>          <Card>            <CardContent>              <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>                <Notifications sx={{ mr: 2 }} />                <Typography variant="h6">Notification Preferences</Typography>              </Box>              <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>                <FormControlLabel                  control={                    <Switch                      checked={settings.notifications.emailNotifications}                      onChange={handleNotificationChange}                      name="emailNotifications"                    />                  }                  label="Email Notifications"                />                <FormControlLabel                  control={                    <Switch                      checked={settings.notifications.appointmentReminders}                      onChange={handleNotificationChange}                      name="appointmentReminders"                    />                  }                  label="Appointment Reminders"                />                <FormControlLabel                  control={                    <Switch                      checked={settings.notifications.systemUpdates}                      onChange={handleNotificationChange}                      name="systemUpdates"                    />                  }                  label="System Updates"                />                <Button                  variant="contained"                  startIcon={<SaveIcon />}                  onClick={() => handleSubmit('notifications')}                  disabled={saving}                  sx={{ mt: 2 }}                >                  Save Notifications                </Button>              </Box>            </CardContent>          </Card>        </Grid>        {}        <Grid item xs={12} md={6}>          <Card>            <CardContent>              <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>                <Security sx={{ mr: 2 }} />                <Typography variant="h6">Security Settings</Typography>              </Box>              <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>                <TextField                  fullWidth                  type="password"                  label="Current Password"                  name="currentPassword"                  value={settings.security.currentPassword}                  onChange={handleSecurityChange}                />                <TextField                  fullWidth                  type="password"                  label="New Password"                  name="newPassword"                  value={settings.security.newPassword}                  onChange={handleSecurityChange}                />                <TextField                  fullWidth                  type="password"                  label="Confirm New Password"                  name="confirmPassword"                  value={settings.security.confirmPassword}                  onChange={handleSecurityChange}                />                <Button                  variant="contained"                  startIcon={<SaveIcon />}                  onClick={() => handleSubmit('security')}                  disabled={saving}                  sx={{ mt: 2 }}                >                  Update Password                </Button>              </Box>            </CardContent>          </Card>        </Grid>      </Grid>    </Container>  );};export default Settings; 