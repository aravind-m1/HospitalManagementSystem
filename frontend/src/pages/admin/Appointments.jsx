import React, { useState, useEffect } from 'react';import {  Container,  Typography,  Box,  Card,  CardContent,  Grid,  TextField,  Button,  Table,  TableBody,  TableCell,  TableContainer,  TableHead,  TableRow,  Paper,  IconButton,  Chip,  Dialog,  DialogTitle,  DialogContent,  DialogActions,  MenuItem,  Alert,  CircularProgress,} from '@mui/material';import {  Edit as EditIcon,  Delete as DeleteIcon,  Check as CheckIcon,  Close as CloseIcon,  Search as SearchIcon,} from '@mui/icons-material';import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';import { LocalizationProvider, DatePicker } from '@mui/x-date-pickers';import axios from 'axios';const Appointments = () => {  const [appointments, setAppointments] = useState([]);  const [loading, setLoading] = useState(true);  const [error, setError] = useState('');  const [success, setSuccess] = useState('');  const [selectedDate, setSelectedDate] = useState(null);  const [searchTerm, setSearchTerm] = useState('');  const [filterStatus, setFilterStatus] = useState('all');  const [editDialog, setEditDialog] = useState({    open: false,    appointment: null,  });  useEffect(() => {    fetchAppointments();  }, []);  const fetchAppointments = async () => {    try {      setLoading(true);      const token = localStorage.getItem('token');      const response = await axios.get('http:        headers: { Authorization: `Bearer ${token}` }      });      setAppointments(response.data);      setError('');    } catch (error) {      console.error('Error fetching appointments:', error);      setError(error.response?.data?.error || 'Failed to fetch appointments');    } finally {      setLoading(false);    }  };  const filteredAppointments = appointments.filter(appointment => {    const matchesSearch = (      appointment.patientName.toLowerCase().includes(searchTerm.toLowerCase()) ||      appointment.doctorName.toLowerCase().includes(searchTerm.toLowerCase())    );    const matchesStatus = filterStatus === 'all' || appointment.status === filterStatus;    const matchesDate = !selectedDate ||       new Date(appointment.date).toDateString() === new Date(selectedDate).toDateString();    return matchesSearch && matchesStatus && matchesDate;  });  const handleStatusUpdate = async (appointmentId, newStatus) => {    try {      const token = localStorage.getItem('token');      await axios.put(        `http:        { status: newStatus },        { headers: { Authorization: `Bearer ${token}` } }      );      setAppointments(appointments.map(apt =>        apt._id === appointmentId ? { ...apt, status: newStatus } : apt      ));      setSuccess('Appointment status updated successfully');      setTimeout(() => setSuccess(''), 3000);    } catch (error) {      console.error('Error updating appointment status:', error);      setError(error.response?.data?.error || 'Failed to update appointment status');    }  };  const handleDelete = async (appointmentId) => {    if (!window.confirm('Are you sure you want to delete this appointment?')) {      return;    }    try {      const token = localStorage.getItem('token');      await axios.delete(`http:        headers: { Authorization: `Bearer ${token}` }      });      setAppointments(appointments.filter(apt => apt._id !== appointmentId));      setSuccess('Appointment deleted successfully');      setTimeout(() => setSuccess(''), 3000);    } catch (error) {      console.error('Error deleting appointment:', error);      setError(error.response?.data?.error || 'Failed to delete appointment');    }  };  const handleEdit = async () => {    if (!editDialog.appointment) return;    try {      const token = localStorage.getItem('token');      await axios.put(        `http:        editDialog.appointment,        { headers: { Authorization: `Bearer ${token}` } }      );      setAppointments(appointments.map(apt =>        apt._id === editDialog.appointment._id ? editDialog.appointment : apt      ));      setEditDialog({ open: false, appointment: null });      setSuccess('Appointment updated successfully');      setTimeout(() => setSuccess(''), 3000);    } catch (error) {      console.error('Error updating appointment:', error);      setError(error.response?.data?.error || 'Failed to update appointment');    }  };  const getStatusChipColor = (status) => {    switch (status) {      case 'confirmed': return 'success';      case 'pending': return 'warning';      case 'cancelled': return 'error';      default: return 'default';    }  };  if (loading) {    return (      <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>        <Box display="flex" justifyContent="center" alignItems="center" minHeight="60vh">          <CircularProgress />        </Box>      </Container>    );  }  return (    <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>      <Typography variant="h4" gutterBottom>        Appointments Management      </Typography>      {error && (        <Alert severity="error" sx={{ mb: 2 }}>          {error}        </Alert>      )}      {success && (        <Alert severity="success" sx={{ mb: 2 }}>          {success}        </Alert>      )}      {}      <Card sx={{ mb: 4 }}>        <CardContent>          <Grid container spacing={3} alignItems="center">            <Grid item xs={12} sm={4}>              <TextField                fullWidth                label="Search"                value={searchTerm}                onChange={(e) => setSearchTerm(e.target.value)}                InputProps={{                  startAdornment: <SearchIcon sx={{ mr: 1, color: 'text.secondary' }} />,                }}              />            </Grid>            <Grid item xs={12} sm={4}>              <LocalizationProvider dateAdapter={AdapterDateFns}>                <DatePicker                  label="Filter by Date"                  value={selectedDate}                  onChange={setSelectedDate}                  renderInput={(params) => <TextField {...params} fullWidth />}                />              </LocalizationProvider>            </Grid>            <Grid item xs={12} sm={4}>              <TextField                fullWidth                select                label="Status"                value={filterStatus}                onChange={(e) => setFilterStatus(e.target.value)}              >                <MenuItem value="all">All</MenuItem>                <MenuItem value="pending">Pending</MenuItem>                <MenuItem value="confirmed">Confirmed</MenuItem>                <MenuItem value="cancelled">Cancelled</MenuItem>              </TextField>            </Grid>          </Grid>        </CardContent>      </Card>      {}      <TableContainer component={Paper}>        <Table>          <TableHead>            <TableRow>              <TableCell>Date & Time</TableCell>              <TableCell>Patient</TableCell>              <TableCell>Doctor</TableCell>              <TableCell>Status</TableCell>              <TableCell>Actions</TableCell>            </TableRow>          </TableHead>          <TableBody>            {filteredAppointments.map((appointment) => (              <TableRow key={appointment._id}>                <TableCell>                  {new Date(appointment.date).toLocaleDateString()}{' '}                  {appointment.time}                </TableCell>                <TableCell>{appointment.patientName}</TableCell>                <TableCell>{appointment.doctorName}</TableCell>                <TableCell>                  <Chip                    label={appointment.status}                    color={getStatusChipColor(appointment.status)}                    size="small"                  />                </TableCell>                <TableCell>                  <IconButton                    onClick={() => handleStatusUpdate(appointment._id, 'confirmed')}                    disabled={appointment.status === 'confirmed'}                    color="success"                    size="small"                  >                    <CheckIcon />                  </IconButton>                  <IconButton                    onClick={() => handleStatusUpdate(appointment._id, 'cancelled')}                    disabled={appointment.status === 'cancelled'}                    color="error"                    size="small"                  >                    <CloseIcon />                  </IconButton>                  <IconButton                    onClick={() => setEditDialog({ open: true, appointment: { ...appointment } })}                    color="primary"                    size="small"                  >                    <EditIcon />                  </IconButton>                  <IconButton                    onClick={() => handleDelete(appointment._id)}                    color="error"                    size="small"                  >                    <DeleteIcon />                  </IconButton>                </TableCell>              </TableRow>            ))}          </TableBody>        </Table>      </TableContainer>      {}      <Dialog open={editDialog.open} onClose={() => setEditDialog({ open: false, appointment: null })}>        <DialogTitle>Edit Appointment</DialogTitle>        <DialogContent>          <Box sx={{ pt: 2 }}>            <Grid container spacing={2}>              <Grid item xs={12}>                <LocalizationProvider dateAdapter={AdapterDateFns}>                  <DatePicker                    label="Date"                    value={editDialog.appointment?.date ? new Date(editDialog.appointment.date) : null}                    onChange={(newDate) => setEditDialog(prev => ({                      ...prev,                      appointment: { ...prev.appointment, date: newDate }                    }))}                    renderInput={(params) => <TextField {...params} fullWidth />}                  />                </LocalizationProvider>              </Grid>              <Grid item xs={12}>                <TextField                  fullWidth                  label="Time"                  value={editDialog.appointment?.time || ''}                  onChange={(e) => setEditDialog(prev => ({                    ...prev,                    appointment: { ...prev.appointment, time: e.target.value }                  }))}                />              </Grid>              <Grid item xs={12}>                <TextField                  fullWidth                  select                  label="Status"                  value={editDialog.appointment?.status || ''}                  onChange={(e) => setEditDialog(prev => ({                    ...prev,                    appointment: { ...prev.appointment, status: e.target.value }                  }))}                >                  <MenuItem value="pending">Pending</MenuItem>                  <MenuItem value="confirmed">Confirmed</MenuItem>                  <MenuItem value="cancelled">Cancelled</MenuItem>                </TextField>              </Grid>            </Grid>          </Box>        </DialogContent>        <DialogActions>          <Button onClick={() => setEditDialog({ open: false, appointment: null })}>            Cancel          </Button>          <Button onClick={handleEdit} variant="contained">            Save Changes          </Button>        </DialogActions>      </Dialog>    </Container>  );};export default Appointments; 