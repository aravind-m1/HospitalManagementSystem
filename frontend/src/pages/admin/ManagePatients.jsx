import React, { useState } from 'react';import {  Box,  Container,  Paper,  Typography,  Table,  TableBody,  TableCell,  TableContainer,  TableHead,  TableRow,  Button,  IconButton,  TextField,  Dialog,  DialogTitle,  DialogContent,  DialogActions,  Avatar,  Chip,  FormControl,  InputLabel,  Select,  MenuItem,} from '@mui/material';import { Add as AddIcon, Edit as EditIcon, Delete as DeleteIcon } from '@mui/icons-material';import { styled } from '@mui/material/styles';const StyledPaper = styled(Paper)(({ theme }) => ({  padding: theme.spacing(3),  marginTop: theme.spacing(4),  borderRadius: theme.spacing(2),  boxShadow: '0 4px 20px rgba(0, 0, 0, 0.1)',}));const ManagePatients = () => {  const [patients, setPatients] = useState([    {      id: 1,      name: 'Sarah Johnson',      age: 35,      gender: 'Female',      bloodGroup: 'A+',      contact: '+1 234 567 890',      status: 'Active',    },  ]);  const [open, setOpen] = useState(false);  const [selectedPatient, setSelectedPatient] = useState(null);  const [formData, setFormData] = useState({    name: '',    age: '',    gender: '',    bloodGroup: '',    contact: '',  });  const handleOpen = (patient = null) => {    if (patient) {      setSelectedPatient(patient);      setFormData(patient);    } else {      setSelectedPatient(null);      setFormData({        name: '',        age: '',        gender: '',        bloodGroup: '',        contact: '',      });    }    setOpen(true);  };  const handleClose = () => {    setOpen(false);    setSelectedPatient(null);  };  const handleChange = (e) => {    setFormData({      ...formData,      [e.target.name]: e.target.value,    });  };  const handleSubmit = () => {    if (selectedPatient) {      setPatients(patients.map(pat =>         pat.id === selectedPatient.id ? { ...pat, ...formData } : pat      ));    } else {      setPatients([...patients, { id: patients.length + 1, ...formData, status: 'Active' }]);    }    handleClose();  };  const handleDelete = (id) => {    setPatients(patients.filter(pat => pat.id !== id));  };  return (    <Container maxWidth="lg">      <Box display="flex" justifyContent="space-between" alignItems="center" mb={4}>        <Typography variant="h4" sx={{ mt: 4 }}>          Manage Patients        </Typography>        <Button          variant="contained"          startIcon={<AddIcon />}          onClick={() => handleOpen()}          sx={{ borderRadius: 2 }}        >          Add New Patient        </Button>      </Box>      <StyledPaper>        <TableContainer>          <Table>            <TableHead>              <TableRow>                <TableCell>Patient</TableCell>                <TableCell>Age</TableCell>                <TableCell>Gender</TableCell>                <TableCell>Blood Group</TableCell>                <TableCell>Contact</TableCell>                <TableCell>Status</TableCell>                <TableCell align="right">Actions</TableCell>              </TableRow>            </TableHead>            <TableBody>              {patients.map((patient) => (                <TableRow key={patient.id}>                  <TableCell>                    <Box display="flex" alignItems="center">                      <Avatar sx={{ mr: 2 }}>{patient.name[0]}</Avatar>                      {patient.name}                    </Box>                  </TableCell>                  <TableCell>{patient.age}</TableCell>                  <TableCell>{patient.gender}</TableCell>                  <TableCell>{patient.bloodGroup}</TableCell>                  <TableCell>{patient.contact}</TableCell>                  <TableCell>                    <Chip                      label={patient.status}                      color={patient.status === 'Active' ? 'success' : 'default'}                      size="small"                    />                  </TableCell>                  <TableCell align="right">                    <IconButton onClick={() => handleOpen(patient)} color="primary">                      <EditIcon />                    </IconButton>                    <IconButton onClick={() => handleDelete(patient.id)} color="error">                      <DeleteIcon />                    </IconButton>                  </TableCell>                </TableRow>              ))}            </TableBody>          </Table>        </TableContainer>      </StyledPaper>      <Dialog open={open} onClose={handleClose} maxWidth="sm" fullWidth>        <DialogTitle>          {selectedPatient ? 'Edit Patient' : 'Add New Patient'}        </DialogTitle>        <DialogContent>          <Box sx={{ mt: 2 }}>            <TextField              fullWidth              label="Name"              name="name"              value={formData.name}              onChange={handleChange}              margin="normal"            />            <TextField              fullWidth              label="Age"              name="age"              type="number"              value={formData.age}              onChange={handleChange}              margin="normal"            />            <FormControl fullWidth margin="normal">              <InputLabel>Gender</InputLabel>              <Select                name="gender"                value={formData.gender}                onChange={handleChange}                label="Gender"              >                <MenuItem value="Male">Male</MenuItem>                <MenuItem value="Female">Female</MenuItem>                <MenuItem value="Other">Other</MenuItem>              </Select>            </FormControl>            <FormControl fullWidth margin="normal">              <InputLabel>Blood Group</InputLabel>              <Select                name="bloodGroup"                value={formData.bloodGroup}                onChange={handleChange}                label="Blood Group"              >                <MenuItem value="A+">A+</MenuItem>                <MenuItem value="A-">A-</MenuItem>                <MenuItem value="B+">B+</MenuItem>                <MenuItem value="B-">B-</MenuItem>                <MenuItem value="AB+">AB+</MenuItem>                <MenuItem value="AB-">AB-</MenuItem>                <MenuItem value="O+">O+</MenuItem>                <MenuItem value="O-">O-</MenuItem>              </Select>            </FormControl>            <TextField              fullWidth              label="Contact"              name="contact"              value={formData.contact}              onChange={handleChange}              margin="normal"            />          </Box>        </DialogContent>        <DialogActions>          <Button onClick={handleClose}>Cancel</Button>          <Button onClick={handleSubmit} variant="contained" color="primary">            {selectedPatient ? 'Update' : 'Add'}          </Button>        </DialogActions>      </Dialog>    </Container>  );};export default ManagePatients; 