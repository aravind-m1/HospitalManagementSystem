import React, { useState, useEffect } from 'react';import {  Box,  Container,  Paper,  Typography,  Table,  TableBody,  TableCell,  TableContainer,  TableHead,  TableRow,  Button,  IconButton,  TextField,  Dialog,  DialogTitle,  DialogContent,  DialogActions,  Avatar,  Chip,  MenuItem,  Alert,  LinearProgress,} from '@mui/material';import { Add as AddIcon, Edit as EditIcon, Delete as DeleteIcon } from '@mui/icons-material';import { styled } from '@mui/material/styles';import axios from 'axios';import { useNavigate } from 'react-router-dom';const StyledPaper = styled(Paper)(({ theme }) => ({  padding: theme.spacing(3),  marginTop: theme.spacing(4),  borderRadius: theme.spacing(2),  boxShadow: '0 4px 20px rgba(0, 0, 0, 0.1)',}));const specialties = [  'Cardiology',  'Dermatology',  'Endocrinology',  'Gastroenterology',  'Neurology',  'Oncology',  'Pediatrics',  'Psychiatry',  'Orthopedics',  'General Medicine',];const ManageDoctors = () => {  const [doctors, setDoctors] = useState([]);  const [loading, setLoading] = useState(true);  const [error, setError] = useState('');  const [open, setOpen] = useState(false);  const [openDelete, setOpenDelete] = useState(false);  const [selectedDoctor, setSelectedDoctor] = useState(null);  const navigate = useNavigate();  const [formData, setFormData] = useState({    firstName: '',    lastName: '',    email: '',    specialty: '',    licenseNumber: '',    phoneNumber: '',    password: '',  });  useEffect(() => {    fetchDoctors();  }, []);  const fetchDoctors = async () => {    try {      console.log('Fetching doctors list...');      const token = localStorage.getItem('token');      const response = await axios.get('/api/admin/doctors', {        headers: { Authorization: `Bearer ${token}` },      });      console.log('Fetched doctors:', response.data);      setDoctors(response.data);      setError('');    } catch (error) {      console.error('Error fetching doctors:', error.response || error);      setError(error.response?.data?.error || 'Error fetching doctors');      if (error.response?.status === 401) {        navigate('/login');      }    } finally {      setLoading(false);    }  };  const handleOpen = (doctor = null) => {    if (doctor) {      setSelectedDoctor(doctor);      setFormData({        firstName: doctor.firstName,        lastName: doctor.lastName,        email: doctor.email,        specialty: doctor.specialty,        licenseNumber: doctor.licenseNumber,        phoneNumber: doctor.phoneNumber,        password: '',       });    } else {      setSelectedDoctor(null);      setFormData({        firstName: '',        lastName: '',        email: '',        specialty: '',        licenseNumber: '',        phoneNumber: '',        password: '',      });    }    setOpen(true);  };  const handleClose = () => {    setOpen(false);    setSelectedDoctor(null);    setError('');  };  const handleChange = (e) => {    setFormData({      ...formData,      [e.target.name]: e.target.value,    });  };  const handleSubmit = async () => {    try {      const token = localStorage.getItem('token');      if (!token) {        setError('Authentication token not found. Please login again.');        return;      }      const requiredFields = selectedDoctor         ? ['firstName', 'lastName', 'email', 'specialty', 'licenseNumber', 'phoneNumber']        : ['firstName', 'lastName', 'email', 'specialty', 'licenseNumber', 'phoneNumber', 'password'];      const missingFields = requiredFields.filter(field => !formData[field]);      if (missingFields.length > 0) {        setError(`Please fill in all required fields: ${missingFields.join(', ')}`);        return;      }      if (selectedDoctor) {        await axios.put(          `/api/admin/doctors/${selectedDoctor._id}`,          formData,          {            headers: { Authorization: `Bearer ${token}` },          }        );      } else {        const response = await axios.post(          '/api/admin/add-doctor',          { ...formData, role: 'doctor' },          {            headers: {               Authorization: `Bearer ${token}`,              'Content-Type': 'application/json'            },          }        );        console.log('Doctor added successfully:', response.data);      }      handleClose();      await fetchDoctors();     } catch (error) {      console.error('Error saving doctor:', error.response || error);      setError(error.response?.data?.error || 'Error saving doctor');    }  };  const handleDeleteClick = (doctor) => {    setSelectedDoctor(doctor);    setOpenDelete(true);  };  const handleDelete = async () => {    try {      const token = localStorage.getItem('token');      await axios.delete(`/api/admin/doctors/${selectedDoctor._id}`, {        headers: { Authorization: `Bearer ${token}` },      });      setOpenDelete(false);      await fetchDoctors();     } catch (error) {      console.error('Error deleting doctor:', error.response || error);      setError(error.response?.data?.error || 'Error deleting doctor');    }  };  if (loading) {    return (      <Container maxWidth="lg">        <Box sx={{ width: '100%', mt: 4 }}>          <LinearProgress />        </Box>      </Container>    );  }  return (    <Container maxWidth="lg">      {error && (        <Alert severity="error" sx={{ mt: 4, mb: 2 }}>          {error}        </Alert>      )}      <Box display="flex" justifyContent="space-between" alignItems="center" mb={4}>        <Typography variant="h4" sx={{ mt: 4 }}>          Manage Doctors        </Typography>        <Button          variant="contained"          startIcon={<AddIcon />}          onClick={() => handleOpen()}          sx={{ borderRadius: 2 }}        >          Add New Doctor        </Button>      </Box>      <StyledPaper>        <TableContainer>          <Table>            <TableHead>              <TableRow>                <TableCell>Doctor</TableCell>                <TableCell>Specialty</TableCell>                <TableCell>Email</TableCell>                <TableCell>Phone</TableCell>                <TableCell>License</TableCell>                <TableCell align="right">Actions</TableCell>              </TableRow>            </TableHead>            <TableBody>              {doctors.map((doctor) => (                <TableRow key={doctor._id}>                  <TableCell>                    <Box display="flex" alignItems="center">                      <Avatar sx={{ mr: 2, bgcolor: 'primary.main' }}>                        {doctor.firstName[0]}                        {doctor.lastName[0]}                      </Avatar>                      Dr. {doctor.firstName} {doctor.lastName}                    </Box>                  </TableCell>                  <TableCell>                    <Chip                      label={doctor.specialty}                      color="primary"                      size="small"                    />                  </TableCell>                  <TableCell>{doctor.email}</TableCell>                  <TableCell>{doctor.phoneNumber}</TableCell>                  <TableCell>{doctor.licenseNumber}</TableCell>                  <TableCell align="right">                    <IconButton onClick={() => handleOpen(doctor)} color="primary">                      <EditIcon />                    </IconButton>                    <IconButton onClick={() => handleDeleteClick(doctor)} color="error">                      <DeleteIcon />                    </IconButton>                  </TableCell>                </TableRow>              ))}            </TableBody>          </Table>        </TableContainer>      </StyledPaper>      {}      <Dialog open={open} onClose={handleClose} maxWidth="sm" fullWidth>        <DialogTitle>          {selectedDoctor ? 'Edit Doctor' : 'Add New Doctor'}        </DialogTitle>        <DialogContent>          <Box sx={{ mt: 2 }}>            <TextField              fullWidth              label="First Name"              name="firstName"              value={formData.firstName}              onChange={handleChange}              margin="normal"              required            />            <TextField              fullWidth              label="Last Name"              name="lastName"              value={formData.lastName}              onChange={handleChange}              margin="normal"              required            />            <TextField              fullWidth              label="Email"              name="email"              type="email"              value={formData.email}              onChange={handleChange}              margin="normal"              required            />            <TextField              fullWidth              select              label="Specialty"              name="specialty"              value={formData.specialty}              onChange={handleChange}              margin="normal"              required            >              {specialties.map((specialty) => (                <MenuItem key={specialty} value={specialty}>                  {specialty}                </MenuItem>              ))}            </TextField>            <TextField              fullWidth              label="License Number"              name="licenseNumber"              value={formData.licenseNumber}              onChange={handleChange}              margin="normal"              required            />            <TextField              fullWidth              label="Phone Number"              name="phoneNumber"              value={formData.phoneNumber}              onChange={handleChange}              margin="normal"              required            />            {!selectedDoctor && (              <TextField                fullWidth                label="Password"                name="password"                type="password"                value={formData.password}                onChange={handleChange}                margin="normal"                required              />            )}          </Box>        </DialogContent>        <DialogActions>          <Button onClick={handleClose}>Cancel</Button>          <Button onClick={handleSubmit} variant="contained" color="primary">            {selectedDoctor ? 'Update' : 'Add'}          </Button>        </DialogActions>      </Dialog>      {}      <Dialog open={openDelete} onClose={() => setOpenDelete(false)}>        <DialogTitle>Confirm Delete</DialogTitle>        <DialogContent>          <Typography>            Are you sure you want to delete Dr. {selectedDoctor?.firstName}{' '}            {selectedDoctor?.lastName}?          </Typography>        </DialogContent>        <DialogActions>          <Button onClick={() => setOpenDelete(false)}>Cancel</Button>          <Button variant="contained" color="error" onClick={handleDelete}>            Delete          </Button>        </DialogActions>      </Dialog>    </Container>  );};export default ManageDoctors; 