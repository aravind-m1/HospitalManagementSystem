import React, { useState, useEffect } from 'react';import { DataGrid } from '@mui/x-data-grid';import { Button, Dialog, DialogTitle, DialogContent, DialogActions, TextField, IconButton, Card, Box, Typography } from '@mui/material';import { Search, FileText, Plus, Edit2, Trash2 } from 'lucide-react';import { toast } from 'react-toastify';import axios from 'axios';import '../styles/medical-records.css';const MedicalRecords = () => {  const [records, setRecords] = useState([]);  const [openDialog, setOpenDialog] = useState(false);  const [searchQuery, setSearchQuery] = useState('');  const [selectedRecord, setSelectedRecord] = useState(null);  const [recordForm, setRecordForm] = useState({    patientName: '',    dateOfBirth: '',    gender: '',    bloodType: '',    allergies: '',    medications: '',    diagnosis: '',    treatment: '',    notes: ''  });  useEffect(() => {    fetchRecords();  }, []);  const fetchRecords = async () => {    try {      const response = await axios.get('/api/medical-records');      setRecords(response.data);    } catch (error) {      toast.error('Failed to fetch medical records');    }  };  const handleInputChange = (e) => {    const { name, value } = e.target;    setRecordForm(prev => ({      ...prev,      [name]: value    }));  };  const handleSubmit = async () => {    try {      if (selectedRecord) {        await axios.put(`/api/medical-records/${selectedRecord._id}`, recordForm);        toast.success('Medical record updated successfully');      } else {        await axios.post('/api/medical-records', recordForm);        toast.success('Medical record created successfully');      }      setOpenDialog(false);      fetchRecords();      resetForm();    } catch (error) {      toast.error('Failed to save medical record');    }  };  const handleEdit = (record) => {    setSelectedRecord(record);    setRecordForm(record);    setOpenDialog(true);  };  const handleDelete = async (id) => {    if (window.confirm('Are you sure you want to delete this record?')) {      try {        await axios.delete(`/api/medical-records/${id}`);        toast.success('Medical record deleted successfully');        fetchRecords();      } catch (error) {        toast.error('Failed to delete medical record');      }    }  };  const resetForm = () => {    setRecordForm({      patientName: '',      dateOfBirth: '',      gender: '',      bloodType: '',      allergies: '',      medications: '',      diagnosis: '',      treatment: '',      notes: ''    });    setSelectedRecord(null);  };  const columns = [    { field: 'patientName', headerName: 'Patient Name', flex: 1 },    { field: 'dateOfBirth', headerName: 'Date of Birth', flex: 1 },    { field: 'gender', headerName: 'Gender', flex: 1 },    { field: 'bloodType', headerName: 'Blood Type', flex: 1 },    {      field: 'actions',      headerName: 'Actions',      flex: 1,      renderCell: (params) => (        <div className="action-buttons">          <IconButton onClick={() => handleEdit(params.row)} color="primary">            <Edit2 size={20} />          </IconButton>          <IconButton onClick={() => handleDelete(params.row._id)} color="error">            <Trash2 size={20} />          </IconButton>        </div>      ),    },  ];  const filteredRecords = records.filter(record =>    record.patientName.toLowerCase().includes(searchQuery.toLowerCase())  );  return (    <div className="medical-records-container">      <div className="header-section">        <h2>Medical Records</h2>        <div className="search-add">          <div className="search-box">            <Search size={20} />            <input              type="text"              placeholder="Search patients..."              value={searchQuery}              onChange={(e) => setSearchQuery(e.target.value)}            />          </div>          <Button            variant="contained"            startIcon={<Plus size={20} />}            onClick={() => {              resetForm();              setOpenDialog(true);            }}          >            Add Record          </Button>        </div>      </div>      <Card className="records-table">        <DataGrid          rows={filteredRecords}          columns={columns}          pageSize={10}          rowsPerPageOptions={[10]}          getRowId={(row) => row._id}          autoHeight        />      </Card>      <Dialog open={openDialog} onClose={() => setOpenDialog(false)} maxWidth="md" fullWidth>        <DialogTitle>          {selectedRecord ? 'Edit Medical Record' : 'New Medical Record'}        </DialogTitle>        <DialogContent>          <div className="record-form">            <Box className="form-row">              <TextField                name="patientName"                label="Patient Name"                value={recordForm.patientName}                onChange={handleInputChange}                fullWidth              />              <TextField                name="dateOfBirth"                label="Date of Birth"                type="date"                value={recordForm.dateOfBirth}                onChange={handleInputChange}                fullWidth                InputLabelProps={{ shrink: true }}              />            </Box>            <Box className="form-row">              <TextField                name="gender"                label="Gender"                value={recordForm.gender}                onChange={handleInputChange}                fullWidth              />              <TextField                name="bloodType"                label="Blood Type"                value={recordForm.bloodType}                onChange={handleInputChange}                fullWidth              />            </Box>            <TextField              name="allergies"              label="Allergies"              value={recordForm.allergies}              onChange={handleInputChange}              fullWidth              multiline              rows={2}              margin="normal"            />            <TextField              name="medications"              label="Current Medications"              value={recordForm.medications}              onChange={handleInputChange}              fullWidth              multiline              rows={2}              margin="normal"            />            <TextField              name="diagnosis"              label="Diagnosis"              value={recordForm.diagnosis}              onChange={handleInputChange}              fullWidth              multiline              rows={3}              margin="normal"            />            <TextField              name="treatment"              label="Treatment Plan"              value={recordForm.treatment}              onChange={handleInputChange}              fullWidth              multiline              rows={3}              margin="normal"            />            <TextField              name="notes"              label="Additional Notes"              value={recordForm.notes}              onChange={handleInputChange}              fullWidth              multiline              rows={3}              margin="normal"            />          </div>        </DialogContent>        <DialogActions>          <Button onClick={() => setOpenDialog(false)}>Cancel</Button>          <Button onClick={handleSubmit} variant="contained" color="primary">            {selectedRecord ? 'Update' : 'Save'}          </Button>        </DialogActions>      </Dialog>    </div>  );};export default MedicalRecords; 