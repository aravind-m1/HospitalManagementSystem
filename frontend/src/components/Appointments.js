import React, { useState, useEffect } from 'react';import FullCalendar from '@fullcalendar/react';import dayGridPlugin from '@fullcalendar/daygrid';import interactionPlugin from '@fullcalendar/interaction';import { Card, Dialog, DialogTitle, DialogContent, DialogActions, Button, TextField, FormControl, InputLabel, Select, MenuItem } from '@mui/material';import { toast } from 'react-toastify';import axios from 'axios';import '../styles/appointments.css';const Appointments = () => {  const [appointments, setAppointments] = useState([]);  const [doctors, setDoctors] = useState([]);  const [openDialog, setOpenDialog] = useState(false);  const [selectedDate, setSelectedDate] = useState(null);  const [appointmentForm, setAppointmentForm] = useState({    patientName: '',    doctorId: '',    time: '',    reason: '',  });  useEffect(() => {    fetchAppointments();    fetchDoctors();  }, []);  const fetchAppointments = async () => {    try {      const response = await axios.get('/api/appointments');      const formattedAppointments = response.data.map(apt => ({        title: `${apt.patientName} - Dr. ${apt.doctor.name}`,        start: new Date(apt.date + 'T' + apt.time),        extendedProps: {          ...apt        }      }));      setAppointments(formattedAppointments);    } catch (error) {      toast.error('Failed to fetch appointments');    }  };  const fetchDoctors = async () => {    try {      const response = await axios.get('/api/doctors');      setDoctors(response.data);    } catch (error) {      toast.error('Failed to fetch doctors');    }  };  const handleDateClick = (arg) => {    setSelectedDate(arg.dateStr);    setOpenDialog(true);  };  const handleInputChange = (e) => {    const { name, value } = e.target;    setAppointmentForm(prev => ({      ...prev,      [name]: value    }));  };  const handleSubmit = async () => {    try {      const appointmentData = {        ...appointmentForm,        date: selectedDate,      };      await axios.post('/api/appointments', appointmentData);      toast.success('Appointment scheduled successfully');      setOpenDialog(false);      fetchAppointments();      resetForm();    } catch (error) {      toast.error('Failed to schedule appointment');    }  };  const resetForm = () => {    setAppointmentForm({      patientName: '',      doctorId: '',      time: '',      reason: '',    });    setSelectedDate(null);  };  return (    <div className="appointments-container">      <h2>Appointment Management</h2>      <Card className="calendar-card">        <FullCalendar          plugins={[dayGridPlugin, interactionPlugin]}          initialView="dayGridMonth"          events={appointments}          dateClick={handleDateClick}          headerToolbar={{            left: 'prev,next today',            center: 'title',            right: 'dayGridMonth,dayGridWeek,dayGridDay'          }}        />      </Card>      <Dialog open={openDialog} onClose={() => setOpenDialog(false)}>        <DialogTitle>Schedule Appointment</DialogTitle>        <DialogContent>          <div className="appointment-form">            <TextField              name="patientName"              label="Patient Name"              value={appointmentForm.patientName}              onChange={handleInputChange}              fullWidth              margin="normal"            />            <FormControl fullWidth margin="normal">              <InputLabel>Doctor</InputLabel>              <Select                name="doctorId"                value={appointmentForm.doctorId}                onChange={handleInputChange}              >                {doctors.map(doctor => (                  <MenuItem key={doctor._id} value={doctor._id}>                    Dr. {doctor.name} - {doctor.specialization}                  </MenuItem>                ))}              </Select>            </FormControl>            <TextField              name="time"              label="Time"              type="time"              value={appointmentForm.time}              onChange={handleInputChange}              fullWidth              margin="normal"              InputLabelProps={{                shrink: true,              }}            />            <TextField              name="reason"              label="Reason for Visit"              value={appointmentForm.reason}              onChange={handleInputChange}              fullWidth              margin="normal"              multiline              rows={4}            />          </div>        </DialogContent>        <DialogActions>          <Button onClick={() => setOpenDialog(false)}>Cancel</Button>          <Button onClick={handleSubmit} variant="contained" color="primary">            Schedule          </Button>        </DialogActions>      </Dialog>    </div>  );};export default Appointments; 