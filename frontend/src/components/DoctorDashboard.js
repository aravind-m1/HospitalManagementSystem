import React, { useState, useEffect } from 'react';import { useNavigate } from 'react-router-dom';import {   Calendar, Clock, FileText, User, Users, ChevronDown,   Home, UserCircle, Eye, EyeOff, Hospital, Stethoscope,  Activity, Bell} from 'lucide-react';import { Card, CardHeader, CardTitle, CardContent, CardFooter } from './shared/Card';import Button from './shared/Button';import { Label, Input, Select, TextArea } from './shared/Input';const DoctorDashboard = () => {  const [activeTab, setActiveTab] = useState('Dashboard');  const [doctorInfo, setDoctorInfo] = useState(null);  const [patients, setPatients] = useState([]);  const [appointments, setAppointments] = useState([]);  const [isLoading, setIsLoading] = useState(false);  const [error, setError] = useState('');  const navigate = useNavigate();  useEffect(() => {    fetchDoctorProfile();    fetchAppointments();    fetchPatients();  }, []);  const fetchDoctorProfile = async () => {    try {      const token = localStorage.getItem('token');      if (!token) {        navigate('/login');        return;      }      const response = await fetch('http:        headers: {          'Authorization': `Bearer ${token}`        }      });      if (response.ok) {        const data = await response.json();        setDoctorInfo(data);      } else {        throw new Error('Failed to fetch doctor profile');      }    } catch (error) {      setError('Error fetching profile: ' + error.message);    }  };  const fetchAppointments = async () => {    try {      const token = localStorage.getItem('token');      if (!token) return;      const response = await fetch('http:        headers: {          'Authorization': `Bearer ${token}`        }      });      if (response.ok) {        const data = await response.json();        setAppointments(data);      } else {        throw new Error('Failed to fetch appointments');      }    } catch (error) {      setError('Error fetching appointments: ' + error.message);    }  };  const fetchPatients = async () => {    try {      const token = localStorage.getItem('token');      if (!token) return;      const response = await fetch('http:        headers: {          'Authorization': `Bearer ${token}`        }      });      if (response.ok) {        const data = await response.json();        setPatients(data);      } else {        throw new Error('Failed to fetch patients');      }    } catch (error) {      setError('Error fetching patients: ' + error.message);    }  };  const handleLogout = () => {    localStorage.removeItem('token');    localStorage.removeItem('role');    localStorage.removeItem('userId');    navigate('/login');  };  const renderDashboard = () => (    <div className="space-y-6">      {error && (        <div className="bg-red-50 text-red-600 p-4 rounded-md">          {error}        </div>      )}      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">        <Card>          <CardHeader icon={Calendar}>            <CardTitle>Today's Appointments</CardTitle>          </CardHeader>          <CardContent>            <div className="text-3xl font-bold text-blue-600">              {appointments.filter(apt =>                 new Date(apt.date).toDateString() === new Date().toDateString()              ).length}            </div>            <p className="text-gray-600">Scheduled for today</p>          </CardContent>        </Card>        <Card>          <CardHeader icon={Users}>            <CardTitle>Total Patients</CardTitle>          </CardHeader>          <CardContent>            <div className="text-3xl font-bold text-green-600">              {patients.length}            </div>            <p className="text-gray-600">Under your care</p>          </CardContent>        </Card>        <Card>          <CardHeader icon={Activity}>            <CardTitle>Completion Rate</CardTitle>          </CardHeader>          <CardContent>            <div className="text-3xl font-bold text-purple-600">              {appointments.length > 0                 ? Math.round((appointments.filter(apt => apt.status === 'completed').length / appointments.length) * 100)                : 0}%            </div>            <p className="text-gray-600">Appointment completion</p>          </CardContent>        </Card>      </div>      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">        <Card>          <CardHeader>            <CardTitle>Upcoming Appointments</CardTitle>          </CardHeader>          <CardContent>            <div className="space-y-4">              {appointments                .filter(apt => new Date(apt.date) >= new Date())                .slice(0, 5)                .map((apt, index) => (                  <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-md">                    <div>                      <p className="font-medium">{apt.patientName}</p>                      <p className="text-sm text-gray-600">                        {new Date(apt.date).toLocaleDateString()} at {apt.time}                      </p>                    </div>                    <Button variant="outline" size="sm">                      View Details                    </Button>                  </div>                ))}            </div>          </CardContent>        </Card>        <Card>          <CardHeader>            <CardTitle>Recent Activity</CardTitle>          </CardHeader>          <CardContent>            <div className="space-y-4">              {appointments                .filter(apt => new Date(apt.date) < new Date())                .slice(0, 5)                .map((apt, index) => (                  <div key={index} className="flex items-center space-x-3 p-3 bg-gray-50 rounded-md">                    <div className="flex-shrink-0">                      <Clock className="h-5 w-5 text-blue-600" />                    </div>                    <div>                      <p className="font-medium">Appointment with {apt.patientName}</p>                      <p className="text-sm text-gray-600">                        {new Date(apt.date).toLocaleDateString()} - {apt.status}                      </p>                    </div>                  </div>                ))}            </div>          </CardContent>        </Card>      </div>    </div>  );  return (    <div className="min-h-screen bg-gray-100">      <nav className="bg-white shadow-sm">        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">          <div className="flex justify-between h-16">            <div className="flex">              <div className="flex-shrink-0 flex items-center">                <Hospital className="h-8 w-8 text-blue-600" />                <span className="ml-2 text-xl font-bold text-gray-900">                  HMS                </span>              </div>              <div className="hidden sm:ml-6 sm:flex sm:space-x-8">                <button                  onClick={() => setActiveTab('Dashboard')}                  className={`${                    activeTab === 'Dashboard'                      ? 'border-blue-500 text-gray-900'                      : 'border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700'                  } inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium`}                >                  Dashboard                </button>                <button                  onClick={() => setActiveTab('Appointments')}                  className={`${                    activeTab === 'Appointments'                      ? 'border-blue-500 text-gray-900'                      : 'border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700'                  } inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium`}                >                  Appointments                </button>                <button                  onClick={() => setActiveTab('Patients')}                  className={`${                    activeTab === 'Patients'                      ? 'border-blue-500 text-gray-900'                      : 'border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700'                  } inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium`}                >                  Patients                </button>              </div>            </div>            <div className="flex items-center">              <button                type="button"                className="p-1 rounded-full text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"              >                <Bell className="h-6 w-6" />              </button>              <div className="ml-3 relative">                <div className="flex items-center space-x-3">                  <div className="flex flex-col items-end">                    <span className="text-sm font-medium text-gray-700">                      Dr. {doctorInfo?.firstName} {doctorInfo?.lastName}                    </span>                    <span className="text-xs text-gray-500">                      {doctorInfo?.specialty}                    </span>                  </div>                  <Button variant="outline" onClick={handleLogout}>                    Logout                  </Button>                </div>              </div>            </div>          </div>        </div>      </nav>      <main className="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">        {activeTab === 'Dashboard' && renderDashboard()}        {}      </main>    </div>  );};export default DoctorDashboard; 