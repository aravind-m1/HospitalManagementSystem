const mongoose = require('mongoose');const appointmentSchema = new mongoose.Schema({  patientId: {    type: mongoose.Schema.Types.ObjectId,    ref: 'Patient',    required: true,    index: true  },  doctorId: {    type: mongoose.Schema.Types.ObjectId,    ref: 'Doctor',    required: true,    index: true  },  date: {    type: String,    required: true,    validate: {      validator: function(v) {        return /^\d{4}-\d{2}-\d{2}$/.test(v);      },      message: props => `${props.value} is not a valid date format! Use YYYY-MM-DD`    }  },  time: {    type: String,    required: true,    validate: {      validator: function(v) {        return /^([01]?[0-9]|2[0-3]):[0-5][0-9]$/.test(v);      },      message: props => `${props.value} is not a valid time format! Use HH:mm`    }  },  reason: {    type: String,    required: true,    trim: true,    minlength: [3, 'Reason must be at least 3 characters long']  },  status: {    type: String,    enum: ['pending', 'confirmed', 'completed', 'cancelled'],    default: 'pending',    index: true  },  notes: {    type: String,    trim: true  },  createdAt: {    type: Date,    default: Date.now,    index: true  },  updatedAt: {    type: Date,    default: Date.now  }});appointmentSchema.index({ doctorId: 1, date: 1, time: 1 });appointmentSchema.pre('save', function(next) {  this.updatedAt = new Date();  next();});appointmentSchema.pre('save', function(next) {  const appointmentDate = new Date(this.date);  appointmentDate.setHours(0, 0, 0, 0);  const today = new Date();  today.setHours(0, 0, 0, 0);  if (appointmentDate < today) {    next(new Error('Cannot book appointments for past dates'));  } else {    next();  }});const Appointment = mongoose.model('Appointment', appointmentSchema);module.exports = Appointment;