const User = require('../models/User');const Appointment = require('../models/Appointment');const bcrypt = require('bcryptjs');exports.getSettings = async (req, res) => {    try {        const user = await User.findById(req.user.id).select('-password');        if (!user) {            return res.status(404).json({ error: 'User not found' });        }        const settings = {            profile: {                firstName: user.firstName,                lastName: user.lastName,                email: user.email,                phone: user.phone || '',            },            notifications: user.notificationSettings || {                emailNotifications: true,                appointmentReminders: true,                systemUpdates: true,            }        };        res.json(settings);    } catch (error) {        console.error('Error in getSettings:', error);        res.status(500).json({ error: 'Server error' });    }};exports.updateProfile = async (req, res) => {    try {        const { firstName, lastName, email, phone } = req.body;        const existingUser = await User.findOne({ email, _id: { $ne: req.user.id } });        if (existingUser) {            return res.status(400).json({ error: 'Email is already in use' });        }        const user = await User.findByIdAndUpdate(            req.user.id,            {                firstName,                lastName,                email,                phone,            },            { new: true }        ).select('-password');        res.json(user);    } catch (error) {        console.error('Error in updateProfile:', error);        res.status(500).json({ error: 'Server error' });    }};exports.updateNotificationSettings = async (req, res) => {    try {        const { emailNotifications, appointmentReminders, systemUpdates } = req.body;        const user = await User.findByIdAndUpdate(            req.user.id,            {                notificationSettings: {                    emailNotifications,                    appointmentReminders,                    systemUpdates,                }            },            { new: true }        ).select('-password');        res.json(user.notificationSettings);    } catch (error) {        console.error('Error in updateNotificationSettings:', error);        res.status(500).json({ error: 'Server error' });    }};exports.changePassword = async (req, res) => {    try {        const { currentPassword, newPassword } = req.body;        const user = await User.findById(req.user.id);        if (!user) {            return res.status(404).json({ error: 'User not found' });        }        const isMatch = await bcrypt.compare(currentPassword, user.password);        if (!isMatch) {            return res.status(400).json({ error: 'Current password is incorrect' });        }        const salt = await bcrypt.genSalt(10);        user.password = await bcrypt.hash(newPassword, salt);        await user.save();        res.json({ message: 'Password updated successfully' });    } catch (error) {        console.error('Error in changePassword:', error);        res.status(500).json({ error: 'Server error' });    }};exports.getAppointments = async (req, res) => {    try {        const appointments = await Appointment.find()            .populate('patient', 'firstName lastName')            .populate('doctor', 'firstName lastName')            .sort({ date: -1 });        const formattedAppointments = appointments.map(apt => ({            _id: apt._id,            date: apt.date,            time: apt.time,            patientName: `${apt.patient.firstName} ${apt.patient.lastName}`,            doctorName: `${apt.doctor.firstName} ${apt.doctor.lastName}`,            status: apt.status,            reason: apt.reason        }));        res.json(formattedAppointments);    } catch (error) {        console.error('Error in getAppointments:', error);        res.status(500).json({ error: 'Server error' });    }};exports.updateAppointmentStatus = async (req, res) => {    try {        const { status } = req.body;        const appointment = await Appointment.findByIdAndUpdate(            req.params.id,            { status },            { new: true }        )        .populate('patient', 'firstName lastName')        .populate('doctor', 'firstName lastName');        if (!appointment) {            return res.status(404).json({ error: 'Appointment not found' });        }        res.json({            _id: appointment._id,            date: appointment.date,            time: appointment.time,            patientName: `${appointment.patient.firstName} ${appointment.patient.lastName}`,            doctorName: `${appointment.doctor.firstName} ${appointment.doctor.lastName}`,            status: appointment.status,            reason: appointment.reason        });    } catch (error) {        console.error('Error in updateAppointmentStatus:', error);        res.status(500).json({ error: 'Server error' });    }};exports.updateAppointment = async (req, res) => {    try {        const { date, time, status } = req.body;        const appointment = await Appointment.findByIdAndUpdate(            req.params.id,            { date, time, status },            { new: true }        )        .populate('patient', 'firstName lastName')        .populate('doctor', 'firstName lastName');        if (!appointment) {            return res.status(404).json({ error: 'Appointment not found' });        }        res.json({            _id: appointment._id,            date: appointment.date,            time: appointment.time,            patientName: `${appointment.patient.firstName} ${appointment.patient.lastName}`,            doctorName: `${appointment.doctor.firstName} ${appointment.doctor.lastName}`,            status: appointment.status,            reason: appointment.reason        });    } catch (error) {        console.error('Error in updateAppointment:', error);        res.status(500).json({ error: 'Server error' });    }};exports.deleteAppointment = async (req, res) => {    try {        const appointment = await Appointment.findByIdAndDelete(req.params.id);        if (!appointment) {            return res.status(404).json({ error: 'Appointment not found' });        }        res.json({ message: 'Appointment deleted successfully' });    } catch (error) {        console.error('Error in deleteAppointment:', error);        res.status(500).json({ error: 'Server error' });    }}; 