const User = require('../models/User');const Appointment = require('../models/Appointment');const Prescription = require('../models/Prescription');const bcrypt = require('bcryptjs');exports.getDashboard = async (req, res) => {    try {        const today = new Date();        today.setHours(0, 0, 0, 0);        const tomorrow = new Date(today);        tomorrow.setDate(tomorrow.getDate() + 1);        const todayAppointments = await Appointment.find({            doctorId: req.user.id,            date: {                $gte: today,                $lt: tomorrow            }        })        .populate('patientId', 'firstName lastName')        .sort({ time: 1 });        const [total, confirmed, pending, cancelled] = await Promise.all([            Appointment.countDocuments({ doctorId: req.user.id }),            Appointment.countDocuments({ doctorId: req.user.id, status: 'confirmed' }),            Appointment.countDocuments({ doctorId: req.user.id, status: 'pending' }),            Appointment.countDocuments({ doctorId: req.user.id, status: 'cancelled' })        ]);        const formattedAppointments = todayAppointments.map(apt => ({            _id: apt._id,            patientName: `${apt.patientId.firstName} ${apt.patientId.lastName}`,            time: apt.time,            status: apt.status,            reason: apt.reason        }));        res.json({            todayAppointments: formattedAppointments,            stats: {                total,                confirmed,                pending,                cancelled            }        });    } catch (error) {        console.error('Error in getDashboard:', error);        res.status(500).json({ error: 'Server error' });    }};exports.getProfile = async (req, res) => {    try {        const user = await User.findById(req.user.id).select('-password');        if (!user) {            return res.status(404).json({ error: 'Doctor not found' });        }        res.json(user);    } catch (error) {        console.error('Error in getProfile:', error);        res.status(500).json({ error: 'Server error' });    }};exports.updateProfile = async (req, res) => {    try {        const { firstName, lastName, email, phone, specialization } = req.body;        const existingUser = await User.findOne({ email, _id: { $ne: req.user.id } });        if (existingUser) {            return res.status(400).json({ error: 'Email is already in use' });        }        const user = await User.findByIdAndUpdate(            req.user.id,            {                firstName,                lastName,                email,                phone,                specialization            },            { new: true }        ).select('-password');        res.json(user);    } catch (error) {        console.error('Error in updateProfile:', error);        res.status(500).json({ error: 'Server error' });    }};exports.updateSettings = async (req, res) => {    try {        const { notificationSettings, currentPassword, newPassword } = req.body;        const updateData = {};        if (notificationSettings) {            updateData.notificationSettings = notificationSettings;        }        if (currentPassword && newPassword) {            const user = await User.findById(req.user.id);            const isMatch = await bcrypt.compare(currentPassword, user.password);            if (!isMatch) {                return res.status(400).json({ error: 'Current password is incorrect' });            }            const salt = await bcrypt.genSalt(10);            updateData.password = await bcrypt.hash(newPassword, salt);        }        const user = await User.findByIdAndUpdate(            req.user.id,            updateData,            { new: true }        ).select('-password');        res.json(user);    } catch (error) {        console.error('Error in updateSettings:', error);        res.status(500).json({ error: 'Server error' });    }};exports.getAppointments = async (req, res) => {    try {        const appointments = await Appointment.find({ doctorId: req.user.id })            .populate('patientId', 'firstName lastName')            .sort({ date: -1, time: 1 });        const formattedAppointments = appointments.map(apt => ({            _id: apt._id,            patientName: `${apt.patientId.firstName} ${apt.patientId.lastName}`,            date: apt.date,            time: apt.time,            status: apt.status,            reason: apt.reason        }));        res.json(formattedAppointments);    } catch (error) {        console.error('Error in getAppointments:', error);        res.status(500).json({ error: 'Server error' });    }};exports.updateAppointmentStatus = async (req, res) => {    try {        const { status } = req.body;        const appointment = await Appointment.findOneAndUpdate(            { _id: req.params.id, doctorId: req.user.id },            { status },            { new: true }        ).populate('patientId', 'firstName lastName');        if (!appointment) {            return res.status(404).json({ error: 'Appointment not found' });        }        res.json({            _id: appointment._id,            patientName: `${appointment.patientId.firstName} ${appointment.patientId.lastName}`,            date: appointment.date,            time: appointment.time,            status: appointment.status,            reason: appointment.reason        });    } catch (error) {        console.error('Error in updateAppointmentStatus:', error);        res.status(500).json({ error: 'Server error' });    }};exports.getPrescriptions = async (req, res) => {    try {        const prescriptions = await Prescription.find({ doctorId: req.user.id })            .populate('patientId', 'firstName lastName')            .sort({ createdAt: -1 });        res.json(prescriptions);    } catch (error) {        console.error('Error in getPrescriptions:', error);        res.status(500).json({ error: 'Server error' });    }};exports.createPrescription = async (req, res) => {    try {        const { patientId, diagnosis, medications, symptoms, notes, followUpDate } = req.body;        if (!patientId || !diagnosis || !medications || !symptoms) {            return res.status(400).json({ error: 'Missing required fields' });        }        if (!Array.isArray(medications) || medications.length === 0) {            return res.status(400).json({ error: 'At least one medication is required' });        }        for (const med of medications) {            if (!med.name || !med.dosage || !med.frequency || !med.duration || !med.timing) {                return res.status(400).json({ error: 'Each medication must have name, dosage, frequency, duration, and timing' });            }        }        const prescription = new Prescription({            patientId,            doctorId: req.user.id,            diagnosis,            symptoms,            medications,            notes,            followUpDate,            status: 'active'        });        await prescription.save();        await prescription.populate('patientId', 'firstName lastName');        res.status(201).json(prescription);    } catch (error) {        console.error('Error in createPrescription:', error);        res.status(500).json({ error: 'Server error' });    }};exports.getPatients = async (req, res) => {    try {        const appointments = await Appointment.find({ doctorId: req.user.id })            .populate('patientId', 'firstName lastName email phone')            .distinct('patientId');        res.json(appointments);    } catch (error) {        console.error('Error in getPatients:', error);        res.status(500).json({ error: 'Server error' });    }}; 