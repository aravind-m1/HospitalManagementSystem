const express = require('express');const Doctor = require('../models/Doctor');const Admin = require('../models/Admin');const jwt = require('jsonwebtoken');const bcrypt = require('bcrypt');const User = require('../models/User');const Appointment = require('../models/Appointment');const Patient = require('../models/Patient');const Prescription = require('../models/Prescription');const auth = require('../middleware/auth');const router = express.Router();const authMiddleware = (req, res, next) => {  const token = req.header('Authorization')?.replace('Bearer ', '');  if (!token) {    return res.status(401).send({ error: 'No token provided' });  }  try {    const jwtSecret = process.env.JWT_SECRET || 'your_jwt_secret';    const decoded = jwt.verify(token, jwtSecret);    req.user = decoded;    next();  } catch (error) {    res.status(401).send({ error: 'Invalid token' });  }};router.post('/add-doctor', auth, async (req, res) => {  try {    console.log('Received add doctor request:', { ...req.body, password: '[REDACTED]' });    if (req.user.role !== 'admin') {      console.log('Unauthorized attempt to add doctor by:', req.user);      return res.status(403).json({ error: 'Not authorized to add doctors' });    }    const { firstName, lastName, email, specialty, licenseNumber, phoneNumber, password } = req.body;    if (!firstName || !lastName || !email || !specialty || !licenseNumber || !phoneNumber || !password) {      return res.status(400).json({ error: 'All fields are required' });    }    const existingDoctor = await Doctor.findOne({      $or: [        { email: email.toLowerCase() },        { licenseNumber: licenseNumber.trim() }      ]    });    if (existingDoctor) {      return res.status(400).json({        error: existingDoctor.email === email.toLowerCase()           ? 'Email already exists'           : 'License number already exists'      });    }    const doctor = new Doctor({      firstName: firstName.trim(),      lastName: lastName.trim(),      email: email.toLowerCase(),      specialty: specialty.trim(),      licenseNumber: licenseNumber.trim(),      phoneNumber: phoneNumber.trim(),      password,      role: 'doctor'    });    await doctor.save();    console.log('Doctor saved successfully:', doctor._id);    const doctorResponse = doctor.toObject();    delete doctorResponse.password;    res.status(201).json({      success: true,      message: 'Doctor added successfully',      doctor: doctorResponse    });  } catch (error) {    console.error('Error adding doctor:', error);    if (error.code === 11000) {      return res.status(400).json({         error: 'A doctor with this email or license number already exists'       });    }    res.status(400).json({ error: error.message });  }});router.post('/add-admin', auth, async (req, res) => {  if (req.user.role !== 'admin') {    return res.status(403).send({ error: 'Not authorized to add admins' });  }  const { firstName, lastName, email, password } = req.body;  try {    const admin = new Admin({ firstName, lastName, email, password });    await admin.save();    res.status(201).send({ message: 'Admin added successfully' });  } catch (error) {    if (error.code === 11000) {      return res.status(400).send({ error: 'Email already exists' });    }    res.status(400).send({ error: error.message });  }});router.get('/profile', auth, async (req, res) => {  try {    const admin = await Admin.findById(req.user.id).select('-password');    if (!admin) {      return res.status(404).json({ error: 'Admin not found' });    }    res.json(admin);  } catch (error) {    res.status(500).json({ error: 'Server error' });  }});router.put('/profile', auth, async (req, res) => {  try {    const { firstName, lastName, email } = req.body;    const admin = await Admin.findById(req.user.id);    if (!admin) {      return res.status(404).send({ error: 'Admin not found' });    }    admin.firstName = firstName;    admin.lastName = lastName;    admin.email = email;    await admin.save();    const adminWithoutPassword = admin.toObject();    delete adminWithoutPassword.password;    res.json({ message: 'Profile updated successfully', admin: adminWithoutPassword });  } catch (error) {    console.error(error);    res.status(500).send({ error: 'Server error' });  }});router.get('/total-doctors', auth, async (req, res) => {  try {    const totalDoctors = await Doctor.countDocuments();    res.json({ totalDoctors });  } catch (error) {    console.error('Error fetching total doctors:', error);    res.status(500).send({ error: 'Server error' });  }});router.get('/total-patients', auth, async (req, res) => {  try {    const totalPatients = await User.countDocuments({ role: 'patient' });    res.json({ totalPatients });  } catch (error) {    console.error('Error fetching total patients:', error);    res.status(500).send({ error: 'Server error' });  }});router.get('/doctor-overview', auth, async (req, res) => {  try {    const doctors = await Doctor.find().select('firstName lastName specialty');    const doctorOverview = await Promise.all(doctors.map(async (doctor) => {      const uniquePatients = await Appointment.distinct('patientId', { doctorId: doctor._id });      return {        name: `${doctor.firstName} ${doctor.lastName}`,        specialty: doctor.specialty,        patients: uniquePatients.length      };    }));    res.json(doctorOverview);  } catch (error) {    console.error('Error fetching doctor overview:', error);    res.status(500).send({ error: 'Server error' });  }});router.get('/patient-overview', auth, async (req, res) => {  try {    const patients = await User.find({ role: 'patient' }).select('firstName lastName');    const patientOverview = await Promise.all(patients.map(async (patient) => {      const appointmentCount = await Appointment.countDocuments({ patientId: patient._id });      return {        name: `${patient.firstName} ${patient.lastName}`,        appointments: appointmentCount      };    }));    res.json(patientOverview);  } catch (error) {    console.error('Error fetching patient overview:', error);    res.status(500).send({ error: 'Server error' });  }});router.get('/stats', auth, async (req, res) => {  try {    if (req.user.role !== 'admin') {      return res.status(403).json({ error: 'Not authorized to view stats' });    }    const [      totalDoctors,      totalPatients,      totalAppointments,      pendingAppointments,      completedAppointments,      todayAppointments    ] = await Promise.all([      Doctor.countDocuments(),      User.countDocuments({ role: 'patient' }),      Appointment.countDocuments(),      Appointment.countDocuments({ status: 'pending' }),      Appointment.countDocuments({ status: 'completed' }),      Appointment.countDocuments({        date: {          $gte: new Date().setHours(0, 0, 0, 0),          $lt: new Date().setHours(23, 59, 59, 999)        }      })    ]);    const doctors = await Doctor.find().select('specialty');    const departmentStats = doctors.reduce((acc, doctor) => {      acc[doctor.specialty] = (acc[doctor.specialty] || 0) + 1;      return acc;    }, {});    res.json({      totalDoctors,      totalPatients,      totalAppointments,      pendingAppointments,      completedAppointments,      appointmentsToday: todayAppointments,      departmentStats    });  } catch (error) {    console.error('Error fetching stats:', error);    res.status(500).json({ error: 'Error fetching statistics' });  }});router.get('/doctors', auth, async (req, res) => {  try {    console.log('Fetching doctors list, requested by:', req.user);    if (req.user.role !== 'admin') {      console.log('Unauthorized attempt to view doctors by:', req.user);      return res.status(403).json({ error: 'Not authorized to view doctors' });    }    const doctors = await Doctor.find()      .select('-password')      .sort({ createdAt: -1 });     console.log(`Found ${doctors.length} doctors`);    res.json(doctors);  } catch (error) {    console.error('Error fetching doctors:', error);    res.status(500).json({ error: 'Server error' });  }});router.get('/patients', auth, async (req, res) => {  try {    const page = parseInt(req.query.page) || 1;    const limit = parseInt(req.query.limit) || 10;    const search = req.query.search || '';    const sortField = req.query.sortField || 'createdAt';    const sortOrder = req.query.sortOrder === 'asc' ? 1 : -1;    const query = {      $or: [        { firstName: { $regex: search, $options: 'i' } },        { lastName: { $regex: search, $options: 'i' } },        { email: { $regex: search, $options: 'i' } },        { phoneNumber: { $regex: search, $options: 'i' } }      ]    };    const total = await Patient.countDocuments(query);    const patients = await Patient.find(query)      .populate({        path: 'appointments',        populate: {          path: 'doctorId',          select: 'firstName lastName specialty'        }      })      .populate('prescriptions')      .sort({ [sortField]: sortOrder })      .skip((page - 1) * limit)      .limit(limit)      .select('-password');    console.log(`Retrieved ${patients.length} patients, with appointments:`,       patients.map(p => ({        id: p._id,        name: `${p.firstName} ${p.lastName}`,        appointmentsCount: p.appointments ? p.appointments.length : 0      }))    );    res.json({      patients,      total,      page,      totalPages: Math.ceil(total / limit)    });  } catch (error) {    console.error('Error fetching patients:', error);    res.status(500).json({ error: 'Server error' });  }});router.get('/patients/:id', auth, async (req, res) => {  try {    const patient = await Patient.findById(req.params.id)      .populate({        path: 'appointments',        populate: {          path: 'doctorId',          select: 'firstName lastName specialty'        }      })      .populate('prescriptions')      .select('-password');    if (!patient) {      return res.status(404).json({ error: 'Patient not found' });    }    res.json(patient);  } catch (error) {    console.error('Error fetching patient details:', error);    res.status(500).json({ error: 'Server error' });  }});router.put('/patients/:id', auth, async (req, res) => {  try {    const {      firstName,      lastName,      email,      phoneNumber,      dateOfBirth,      gender,      address,      bloodType,      allergies,      emergencyContact    } = req.body;    const patient = await Patient.findById(req.params.id);    if (!patient) {      return res.status(404).json({ error: 'Patient not found' });    }    if (firstName) patient.firstName = firstName;    if (lastName) patient.lastName = lastName;    if (email) patient.email = email;    if (phoneNumber) patient.phoneNumber = phoneNumber;    if (dateOfBirth) patient.dateOfBirth = dateOfBirth;    if (gender) patient.gender = gender;    if (address) patient.address = address;    if (bloodType) patient.bloodType = bloodType;    if (allergies) patient.allergies = allergies;    if (emergencyContact) patient.emergencyContact = emergencyContact;    await patient.save();    res.json(patient);  } catch (error) {    console.error('Error updating patient:', error);    res.status(500).json({ error: 'Server error' });  }});router.post('/patients/:id/medical-history', auth, async (req, res) => {  try {    const { condition, diagnosedDate, notes } = req.body;    const patient = await Patient.findById(req.params.id);    if (!patient) {      return res.status(404).json({ error: 'Patient not found' });    }    patient.medicalHistory.push({      condition,      diagnosedDate,      notes    });    await patient.save();    res.json(patient.medicalHistory);  } catch (error) {    console.error('Error adding medical history:', error);    res.status(500).json({ error: 'Server error' });  }});router.delete('/patients/:id', auth, async (req, res) => {  try {    const patient = await Patient.findById(req.params.id);    if (!patient) {      return res.status(404).json({ error: 'Patient not found' });    }    await Appointment.deleteMany({ patientId: patient._id });    await Prescription.deleteMany({ patientId: patient._id });    await Patient.findByIdAndDelete(patient._id);    res.json({ message: 'Patient deleted successfully' });  } catch (error) {    console.error('Error deleting patient:', error);    res.status(500).json({ error: 'Server error' });  }});router.put('/doctors/:id', auth, async (req, res) => {  try {    const { firstName, lastName, email, specialty, licenseNumber, phoneNumber } = req.body;    const doctor = await Doctor.findById(req.params.id);    if (!doctor) {      return res.status(404).json({ error: 'Doctor not found' });    }    doctor.firstName = firstName || doctor.firstName;    doctor.lastName = lastName || doctor.lastName;    doctor.email = email || doctor.email;    doctor.specialty = specialty || doctor.specialty;    doctor.licenseNumber = licenseNumber || doctor.licenseNumber;    doctor.phoneNumber = phoneNumber || doctor.phoneNumber;    await doctor.save();    res.json({ message: 'Doctor updated successfully' });  } catch (error) {    res.status(500).json({ error: 'Server error' });  }});router.delete('/doctors/:id', auth, async (req, res) => {  try {    const doctor = await Doctor.findById(req.params.id);    if (!doctor) {      return res.status(404).json({ error: 'Doctor not found' });    }    await Doctor.findByIdAndDelete(req.params.id);    res.json({ message: 'Doctor removed successfully' });  } catch (error) {    res.status(500).json({ error: 'Server error' });  }});router.put('/change-password', auth, async (req, res) => {  try {    const { currentPassword, newPassword } = req.body;    const admin = await Admin.findById(req.user.id);    if (!admin) {      return res.status(404).json({ error: 'Admin not found' });    }    const isMatch = await bcrypt.compare(currentPassword, admin.password);    if (!isMatch) {      return res.status(400).json({ error: 'Current password is incorrect' });    }    admin.password = newPassword;    await admin.save();    res.json({ message: 'Password updated successfully' });  } catch (error) {    console.error('Error changing password:', error);    res.status(500).json({ error: 'Server error' });  }});router.get('/dashboard/stats', auth, async (req, res) => {  try {    console.log('Fetching dashboard stats, requested by:', req.user);    if (req.user.role !== 'admin') {      console.log('Unauthorized attempt to view stats by:', req.user);      return res.status(403).json({ error: 'Not authorized to view stats' });    }    const [      totalDoctorsResult,       totalPatientsResult,       appointmentsResult    ] = await Promise.allSettled([      Doctor.countDocuments(),      Patient.countDocuments(),      Appointment.find()        .populate('doctorId', 'specialty')        .sort({ date: -1 })     ]);    const totalDoctors = totalDoctorsResult.status === 'fulfilled' ? totalDoctorsResult.value : 0;    const totalPatients = totalPatientsResult.status === 'fulfilled' ? totalPatientsResult.value : 0;    const appointments = appointmentsResult.status === 'fulfilled' ? appointmentsResult.value : [];    console.log('Stats count:', {       totalDoctors,       totalPatients,       totalAppointments: appointments.length     });    const today = new Date();    today.setHours(0, 0, 0, 0);    const appointmentsToday = appointments.filter(apt => {      try {        const aptDate = new Date(apt.date);        return aptDate.toDateString() === today.toDateString();      } catch (e) {        console.error('Error processing appointment date:', e);        return false;      }    });    const completedAppointments = appointments.filter(apt => apt.status === 'completed').length;    const pendingAppointments = appointments.filter(apt => apt.status === 'pending').length;    const departmentStats = appointments.reduce((acc, apt) => {      try {        const dept = apt.doctorId?.specialty || 'Unknown';        acc[dept] = (acc[dept] || 0) + 1;      } catch (e) {        console.error('Error processing department stats:', e);      }      return acc;    }, {});    const response = {      totalDoctors,      totalPatients,      appointmentsToday: appointmentsToday.length,      totalAppointments: appointments.length,      completedAppointments,      pendingAppointments,      departmentStats    };    console.log('Sending dashboard stats:', response);    res.json(response);  } catch (error) {    console.error('Error fetching dashboard stats:', error);    res.status(500).json({ error: 'Error fetching statistics', details: error.message });  }});router.get('/dashboard/appointments', auth, async (req, res) => {  try {    console.log('Fetching appointment stats for admin dashboard');    if (req.user.role !== 'admin') {      return res.status(403).send({ error: 'Not authorized' });    }    const appointments = await Appointment.find()      .populate('doctorId', 'firstName lastName specialty')      .populate('patientId', 'firstName lastName');    const appointmentsByStatus = {      completed: [],      pending: [],      cancelled: []    };    appointments.forEach(apt => {      try {        const safeAppointment = {          id: apt._id,          date: apt.date,          time: apt.time || 'N/A',          doctor: apt.doctorId ? `Dr. ${apt.doctorId.firstName || ''} ${apt.doctorId.lastName || ''}`.trim() : 'Unknown Doctor',          patient: apt.patientId ? `${apt.patientId.firstName || ''} ${apt.patientId.lastName || ''}`.trim() : 'Unknown Patient',          department: apt.doctorId?.specialty || 'Unknown',          reason: apt.reason || 'No reason provided'        };        const status = apt.status && appointmentsByStatus[apt.status] ? apt.status : 'pending';        appointmentsByStatus[status].push(safeAppointment);      } catch (e) {        console.error('Error processing appointment:', e, apt);      }    });    console.log(`Processed ${appointments.length} appointments for dashboard`);    res.json(appointmentsByStatus);  } catch (error) {    console.error('Error fetching appointment stats:', error);    res.status(500).json({ error: 'Server error', details: error.message });  }});router.get('/appointments', auth, async (req, res) => {  try {    if (req.user.role !== 'admin') {      return res.status(403).json({ error: 'Not authorized to view appointments' });    }    const appointments = await Appointment.find()      .populate('doctorId', 'firstName lastName specialty')      .populate('patientId', 'firstName lastName email phoneNumber')      .sort({ date: -1 });    const formattedAppointments = appointments.map(apt => ({      _id: apt._id,      date: apt.date,      time: apt.time,      status: apt.status,      reason: apt.reason,      notes: apt.notes,      doctorName: apt.doctorId ? `${apt.doctorId.firstName} ${apt.doctorId.lastName}` : 'Unknown Doctor',      doctorSpecialty: apt.doctorId ? apt.doctorId.specialty : 'Unknown',      doctorId: apt.doctorId ? apt.doctorId._id : null,      patientName: apt.patientId ? `${apt.patientId.firstName} ${apt.patientId.lastName}` : 'Unknown Patient',      patientEmail: apt.patientId ? apt.patientId.email : '',      patientPhone: apt.patientId ? apt.patientId.phoneNumber : '',      patientId: apt.patientId ? apt.patientId._id : null,      createdAt: apt.createdAt    }));    res.json(formattedAppointments);  } catch (error) {    console.error('Error fetching appointments:', error);    res.status(500).json({ error: 'Server error' });  }});router.put('/appointments/:id/status', auth, async (req, res) => {  try {    if (req.user.role !== 'admin') {      return res.status(403).json({ error: 'Not authorized to update appointments' });    }    const { status } = req.body;    if (!status || !['pending', 'confirmed', 'completed', 'cancelled'].includes(status)) {      return res.status(400).json({ error: 'Invalid status' });    }    const appointment = await Appointment.findByIdAndUpdate(      req.params.id,      { status },      { new: true }    );    if (!appointment) {      return res.status(404).json({ error: 'Appointment not found' });    }    res.json(appointment);  } catch (error) {    console.error('Error updating appointment status:', error);    res.status(500).json({ error: 'Server error' });  }});router.delete('/appointments/:id', auth, async (req, res) => {  try {    if (req.user.role !== 'admin') {      return res.status(403).json({ error: 'Not authorized to delete appointments' });    }    const appointment = await Appointment.findByIdAndDelete(req.params.id);    if (!appointment) {      return res.status(404).json({ error: 'Appointment not found' });    }    res.json({ message: 'Appointment deleted successfully' });  } catch (error) {    console.error('Error deleting appointment:', error);    res.status(500).json({ error: 'Server error' });  }});module.exports = router;