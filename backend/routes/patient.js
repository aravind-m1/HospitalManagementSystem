const express = require('express');const User = require('../models/User');const Patient = require('../models/Patient');const jwt = require('jsonwebtoken');const Appointment = require('../models/Appointment');const Doctor = require('../models/Doctor');const Prescription = require('../models/Prescription');const bcrypt = require('bcrypt');const auth = require('../middleware/auth');const router = express.Router();router.get('/available-slots', async (req, res) => {  try {    const { doctorId, date } = req.query;    console.log('Received request for available slots:', { doctorId, date });    if (!doctorId || !date) {      return res.status(400).json({ error: 'Doctor ID and date are required' });    }    const doctor = await Doctor.findById(doctorId);    if (!doctor) {      return res.status(404).json({ error: 'Doctor not found' });    }    const selectedDate = new Date(date);    selectedDate.setHours(0, 0, 0, 0);    const today = new Date();    today.setHours(0, 0, 0, 0);    if (selectedDate < today) {      return res.status(400).json({ error: 'Cannot check availability for past dates' });    }    const timeSlots = [];    for (let hour = 9; hour < 21; hour++) {      for (let minute of ['00', '30']) {        timeSlots.push(`${hour.toString().padStart(2, '0')}:${minute}`);      }    }    const bookedAppointments = await Appointment.find({      doctor: doctorId,      date: date,      status: { $ne: 'cancelled' }    }).select('time');    console.log('Found booked appointments:', bookedAppointments);    const bookedSlots = bookedAppointments.map(apt => apt.time);    const availableSlots = timeSlots.filter(slot => !bookedSlots.includes(slot));    console.log('Available slots:', availableSlots);    res.json({      message: 'Available slots retrieved successfully',      availableSlots: availableSlots    });  } catch (error) {    console.error('Error fetching available slots:', error);    res.status(500).json({ error: 'Server error while fetching available slots' });  }});router.get('/profile', auth, async (req, res) => {  try {    console.log('Patient profile request received for ID:', req.user.id);    const user = await User.findById(req.user.id);    if (!user) {      console.log('User not found with ID:', req.user.id);      return res.status(404).json({ error: 'User not found' });    }    let patient = await Patient.findOne({ email: user.email }).select('-password');    if (!patient) {      console.log('No specific Patient record found, returning User data');      return res.json({        _id: user._id,        firstName: user.firstName,        lastName: user.lastName,        email: user.email,        phone: user.phone,        role: user.role      });    }    console.log('Patient profile retrieved successfully for:', patient.firstName);    res.json(patient);  } catch (error) {    console.error('Error fetching patient profile:', error);    res.status(500).json({ error: 'Server error' });  }});router.put('/profile', auth, async (req, res) => {  try {    const {      firstName,      lastName,      email,      phone,      address,      dateOfBirth,      bloodGroup,      emergencyContact,    } = req.body;    const patient = await Patient.findById(req.user.id);    if (!patient) {      return res.status(404).json({ error: 'Patient not found' });    }    if (firstName) patient.firstName = firstName;    if (lastName) patient.lastName = lastName;    if (email) patient.email = email;    if (phone) patient.phone = phone;    if (address) patient.address = address;    if (dateOfBirth) patient.dateOfBirth = dateOfBirth;    if (bloodGroup) patient.bloodGroup = bloodGroup;    if (emergencyContact) patient.emergencyContact = emergencyContact;    await patient.save();    res.json(patient);  } catch (error) {    console.error('Error updating patient profile:', error);    res.status(500).json({ error: 'Server error' });  }});router.put('/change-password', auth, async (req, res) => {  try {    const { currentPassword, newPassword } = req.body;    const patient = await Patient.findById(req.user.id);    if (!patient) {      return res.status(404).json({ error: 'Patient not found' });    }    const isMatch = await bcrypt.compare(currentPassword, patient.password);    if (!isMatch) {      return res.status(400).json({ error: 'Current password is incorrect' });    }    const salt = await bcrypt.genSalt(10);    patient.password = await bcrypt.hash(newPassword, salt);    await patient.save();    res.json({ message: 'Password updated successfully' });  } catch (error) {    console.error('Error changing password:', error);    res.status(500).json({ error: 'Server error' });  }});router.put('/notification-settings', auth, async (req, res) => {  try {    const patient = await Patient.findById(req.user.id);    if (!patient) {      return res.status(404).json({ error: 'Patient not found' });    }    patient.notificationSettings = {      ...patient.notificationSettings,      ...req.body,    };    await patient.save();    res.json(patient.notificationSettings);  } catch (error) {    console.error('Error updating notification settings:', error);    res.status(500).json({ error: 'Server error' });  }});router.get('/appointments', auth, async (req, res) => {  try {    console.log('Fetching appointments for patient ID:', req.user.id);    const user = await User.findById(req.user.id);    if (!user) {      console.log('User not found with ID:', req.user.id);      return res.status(404).json({ error: 'User not found' });    }    let patient = await Patient.findById(user.id);    if (!patient) {      patient = await Patient.findOne({ email: user.email });    }    if (!patient) {      console.log('No patient record found for user:', user.email);      return res.json([]);      }    const appointments = await Appointment.find({ patientId: patient._id })      .populate('doctorId', 'firstName lastName specialty email phoneNumber')      .sort({ date: -1, time: 1 });    console.log(`Found ${appointments.length} appointments for patient ${patient._id}`);    const formattedAppointments = appointments.map(apt => ({      _id: apt._id,      date: apt.date,      time: apt.time,      reason: apt.reason,      status: apt.status,      notes: apt.notes || '',      doctorId: apt.doctorId ? {        _id: apt.doctorId._id,        firstName: apt.doctorId.firstName,        lastName: apt.doctorId.lastName,        specialty: apt.doctorId.specialty,        email: apt.doctorId.email,        phoneNumber: apt.doctorId.phoneNumber      } : null,      patientId: {        _id: patient._id,        firstName: patient.firstName,        lastName: patient.lastName,        email: patient.email,        phone: patient.phone      },      createdAt: apt.createdAt    }));    console.log('Sending formatted appointments:', formattedAppointments.length);    res.json(formattedAppointments);  } catch (error) {    console.error('Error fetching appointments:', error);    res.status(500).json({ error: 'Server error' });  }});router.post('/appointments', auth, async (req, res) => {  try {    const { doctorId, date, time, reason } = req.body;    console.log('1. Received appointment booking request:', {      userId: req.user.id,      doctorId,      date,      time,      reason    });    if (!doctorId || !date || !time || !reason) {      console.log('2. Missing required fields:', { doctorId, date, time, reason });      return res.status(400).json({ error: 'All fields are required' });    }    const doctor = await Doctor.findById(doctorId);    console.log('3. Doctor lookup result:', doctor ? 'Found' : 'Not Found');    if (!doctor) {      return res.status(404).json({ error: 'Doctor not found' });    }    const user = await User.findById(req.user.id);    console.log('4. User lookup result:', {      found: user ? true : false,      role: user?.role,      id: req.user.id    });    if (!user) {      return res.status(404).json({ error: 'User not found' });    }    if (user.role !== 'patient') {      return res.status(403).json({ error: 'Only patients can book appointments' });    }    let patient = await Patient.findOne({ email: user.email });    if (!patient) {      patient = new Patient({        firstName: user.firstName,        lastName: user.lastName,        email: user.email,        phone: user.phone || '',        gender: 'other',        dateOfBirth: new Date(),        bloodType: 'O+',        address: {          street: '',          city: '',          state: '',          zipCode: '',          country: ''        },        emergencyContact: {          name: '',          relationship: '',          phoneNumber: ''        },        medicalHistory: [],        allergies: []      });      await patient.save();      console.log('5. Created new patient record:', patient._id);    } else {      console.log('5. Found existing patient record:', patient._id);    }    const existingAppointment = await Appointment.findOne({      doctorId: doctorId,      date: date,      time: time,      status: { $ne: 'cancelled' }    });    console.log('6. Time slot check:', {      isAvailable: !existingAppointment,      existingAppointment: existingAppointment ? 'Found' : 'Not Found'    });    if (existingAppointment) {      return res.status(400).json({ error: 'This time slot is not available' });    }    const appointmentData = {      patientId: patient._id,       doctorId: doctorId,      date: date,      time: time,      reason: reason,      status: 'pending'    };    console.log('7. Creating appointment with data:', appointmentData);    const appointment = new Appointment(appointmentData);    const savedAppointment = await appointment.save();    console.log('8. Appointment saved with ID:', savedAppointment._id);    await Patient.findByIdAndUpdate(      patient._id,      { $push: { appointments: savedAppointment._id } }    );    console.log('9. Updated patient record with appointment reference');    const populatedAppointment = await Appointment.findById(savedAppointment._id)      .populate('doctorId', 'firstName lastName specialty email phoneNumber')      .populate('patientId', 'firstName lastName email phone');    console.log('10. Populated appointment:', populatedAppointment);    const formattedAppointment = {      _id: populatedAppointment._id,      date: populatedAppointment.date,      time: populatedAppointment.time,      reason: populatedAppointment.reason,      status: populatedAppointment.status,      doctorId: populatedAppointment.doctorId ? {        _id: populatedAppointment.doctorId._id,        firstName: populatedAppointment.doctorId.firstName,        lastName: populatedAppointment.doctorId.lastName,        specialty: populatedAppointment.doctorId.specialty,        email: populatedAppointment.doctorId.email,        phoneNumber: populatedAppointment.doctorId.phoneNumber      } : null,      patientId: populatedAppointment.patientId ? {        _id: populatedAppointment.patientId._id,        firstName: populatedAppointment.patientId.firstName,        lastName: populatedAppointment.patientId.lastName,        email: populatedAppointment.patientId.email,        phone: populatedAppointment.patientId.phone      } : null,      createdAt: populatedAppointment.createdAt    };    return res.status(201).json({      message: 'Appointment booked successfully',      appointment: formattedAppointment    });  } catch (error) {    console.error('11. Final error catch:', {      error: error.message,      stack: error.stack,      name: error.name,      validationErrors: error.errors    });    return res.status(500).json({       error: 'Server error while booking appointment',      message: error.message    });  }});router.post('/appointments/:id/cancel', auth, async (req, res) => {  try {    const appointment = await Appointment.findOne({      _id: req.params.id,      patientId: req.user.id,    });    if (!appointment) {      return res.status(404).json({ error: 'Appointment not found' });    }    if (appointment.status === 'completed') {      return res.status(400).json({ error: 'Cannot cancel a completed appointment' });    }    appointment.status = 'cancelled';    appointment.cancelReason = req.body.reason;    await appointment.save();    res.json(appointment);  } catch (error) {    console.error('Error cancelling appointment:', error);    res.status(500).json({ error: 'Server error' });  }});router.get('/medical-history', auth, async (req, res) => {  try {    const userId = req.user.id;    console.log('Fetching medical history for user:', userId);    const user = await User.findById(userId);    if (!user) {      console.log('User not found with ID:', userId);      return res.status(404).json({ error: 'User not found' });    }    let patient = await Patient.findById(user.id);    if (!patient) {      patient = await Patient.findOne({ email: user.email });    }    if (!patient) {      console.log('No patient record found for user:', user.email);      return res.json({        appointments: [],        prescriptions: [],        conditions: [],        allergies: []      });    }    const appointments = await Appointment.find({ patientId: patient._id })      .populate('doctorId', 'firstName lastName specialty email phoneNumber')      .sort({ date: -1, time: 1 });    console.log(`Found ${appointments.length} appointments for patient`);    const formattedAppointments = appointments.map(apt => ({      _id: apt._id,      date: apt.date,      time: apt.time,      reason: apt.reason,      status: apt.status,      notes: apt.notes || '',      doctorId: apt.doctorId ? {        _id: apt.doctorId._id,        firstName: apt.doctorId.firstName,        lastName: apt.doctorId.lastName,        specialty: apt.doctorId.specialty,        email: apt.doctorId.email,        phoneNumber: apt.doctorId.phoneNumber      } : null,      createdAt: apt.createdAt    }));    let prescriptions = [];    try {      const patientPrescriptions = await Prescription.find({        patientId: patient._id,        patientModel: 'Patient'      })      .populate('doctorId', 'firstName lastName specialty')      .sort({ createdAt: -1 });      console.log(`Found ${patientPrescriptions.length} prescriptions for patient`);      prescriptions = patientPrescriptions;    } catch (err) {      console.error('Error fetching prescriptions:', err);    }    const formattedPrescriptions = prescriptions.map(p => ({      _id: p._id,      title: p.diagnosis || 'Medical Prescription',      diagnosis: p.diagnosis,      medications: p.medications,      instructions: p.instructions,      date: p.date || p.createdAt,      doctorId: p.doctorId ? {        _id: p.doctorId._id,        firstName: p.doctorId.firstName,        lastName: p.doctorId.lastName,        specialty: p.doctorId.specialty      } : null,      createdAt: p.createdAt    }));    const conditions = patient.medicalHistory || [];    const allergies = patient.allergies || [];    console.log(`Returning ${formattedAppointments.length} appointments and ${formattedPrescriptions.length} prescriptions`);    res.json({      appointments: formattedAppointments,      prescriptions: formattedPrescriptions,      conditions: conditions,      allergies: allergies    });  } catch (error) {    console.error('Error fetching medical history:', error);    res.status(500).json({       error: 'Server error fetching medical history',      details: error.message    });  }});router.get('/prescriptions', auth, async (req, res) => {  try {    const userId = req.user.id;    console.log('Fetching prescriptions for user:', userId);    let prescriptions = [];    const userPrescriptions = await Prescription.find({       patientId: userId,      patientModel: 'User'    })    .populate('doctorId', 'firstName lastName specialty')    .sort({ createdAt: -1 });    console.log(`Found ${userPrescriptions.length} prescriptions with User model reference`);    prescriptions = [...userPrescriptions];    try {      const patient = await Patient.findOne({ email: req.user.email });      if (patient) {        console.log('Found linked Patient document:', patient._id);        const patientPrescriptions = await Prescription.find({          patientId: patient._id,          patientModel: 'Patient'        })        .populate('doctorId', 'firstName lastName specialty')        .sort({ createdAt: -1 });        console.log(`Found ${patientPrescriptions.length} prescriptions with Patient model reference`);        prescriptions = [...prescriptions, ...patientPrescriptions];        if (patientPrescriptions.length > 0) {          const prescriptionIds = patientPrescriptions.map(p => p._id);          await Patient.findByIdAndUpdate(patient._id, {            $addToSet: { prescriptions: { $each: prescriptionIds } }          });          console.log('Updated Patient document with prescription references');        }      }    } catch (err) {      console.error('Error finding linked Patient record:', err);    }    prescriptions.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));    const formattedPrescriptions = prescriptions.map(p => {      let formattedPrescription = p.toObject();      if (!formattedPrescription.title) {        formattedPrescription.title = p.diagnosis || 'Medical Prescription';      }      if (p.doctorId && typeof p.doctorId === 'object') {        formattedPrescription.doctorName = `${p.doctorId.firstName || ''} ${p.doctorId.lastName || ''}`.trim() || 'Unknown';      } else {        formattedPrescription.doctorName = 'Unknown Doctor';      }      if (!formattedPrescription.date) {        formattedPrescription.date = formattedPrescription.createdAt;      }      return formattedPrescription;    });    console.log(`Returning ${formattedPrescriptions.length} formatted prescriptions`);    res.json(formattedPrescriptions);  } catch (error) {    console.error('Error fetching prescriptions:', error);    res.status(500).json({       error: 'Error retrieving prescriptions',      details: error.message    });  }});module.exports = router;