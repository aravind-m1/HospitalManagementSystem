const express = require('express');const Doctor = require('../models/Doctor');const jwt = require('jsonwebtoken');const Appointment = require('../models/Appointment');const User = require('../models/User');const Prescription = require('../models/Prescription');const Patient = require('../models/Patient');const auth = require('../middleware/auth');const bcrypt = require('bcrypt');const router = express.Router();const authMiddleware = (req, res, next) => {  const token = req.header('Authorization')?.replace('Bearer ', '');  if (!token) {    return res.status(401).send({ error: 'No token provided' });  }  try {    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'your_jwt_secret');    req.user = decoded;    next();  } catch (error) {    res.status(401).send({ error: 'Invalid token' });  }};router.get('/profile', auth, async (req, res) => {  try {    console.log('Doctor profile request received for ID:', req.user.id);    const doctor = await Doctor.findById(req.user.id).select('-password');    if (!doctor) {      console.log('Doctor not found with ID:', req.user.id);      return res.status(404).json({ error: 'Doctor not found' });    }    console.log('Doctor profile retrieved successfully for:', doctor.firstName);    res.json(doctor);  } catch (error) {    console.error('Error fetching doctor profile:', error);    res.status(500).json({ error: 'Server error' });  }});router.put('/profile', auth, async (req, res) => {  try {    const { firstName, lastName, specialty, phoneNumber } = req.body;    const doctor = await Doctor.findById(req.user.id);    if (!doctor) {      return res.status(404).json({ error: 'Doctor not found' });    }    doctor.firstName = firstName || doctor.firstName;    doctor.lastName = lastName || doctor.lastName;    doctor.specialty = specialty || doctor.specialty;    doctor.phoneNumber = phoneNumber || doctor.phoneNumber;    await doctor.save();    res.json({ message: 'Profile updated successfully' });  } catch (error) {    res.status(500).json({ error: 'Server error' });  }});router.get('/all', async (req, res) => {  try {    const doctors = await Doctor.find().select('firstName lastName specialty');    res.json(doctors);  } catch (error) {    console.error(error);    res.status(500).send({ error: 'Server error' });  }});router.get('/patients-with-appointments', auth, async (req, res) => {  try {    const doctorId = req.user.id;    const appointments = await Appointment.find({ doctorId }).sort({ date: 1 });    const patientIds = [...new Set(appointments.map(app => app.patientId.toString()))];    const patients = await User.find({ _id: { $in: patientIds }, role: 'patient' });    const patientsWithAppointments = patients.map(patient => {      const patientAppointments = appointments.filter(app => app.patientId.toString() === patient._id.toString());      const lastVisit = patientAppointments.find(app => new Date(app.date) < new Date());      const nextAppointment = patientAppointments.find(app => new Date(app.date) >= new Date());      return {        ...patient.toObject(),        lastVisit: lastVisit ? lastVisit.date : null,        nextAppointment: nextAppointment ? nextAppointment.date : null      };    });    res.json(patientsWithAppointments);  } catch (error) {    console.error('Error fetching patients with appointments:', error);    res.status(500).send({ error: 'Server error' });  }});router.get('/available-slots', auth, async (req, res) => {  try {    const { date } = req.query;    const workingHours = ['09:00', '10:00', '11:00', '12:00', '14:00', '15:00', '16:00', '17:00'];    const bookedAppointments = await Appointment.find({      doctorId: req.user.id,      date    }).select('time');    const bookedSlots = bookedAppointments.map(apt => apt.time);    const availableSlots = workingHours.filter(time => !bookedSlots.includes(time));    res.json(availableSlots);  } catch (error) {    res.status(500).json({ error: 'Server error' });  }});router.post('/appointments', auth, async (req, res) => {  try {    const { patientId, date, time, reason } = req.body;    const patient = await Patient.findById(patientId);    if (!patient) {      return res.status(404).json({ error: 'Patient not found' });    }    const existingAppointment = await Appointment.findOne({      doctorId: req.user.id,      date,      time    });    if (existingAppointment) {      return res.status(400).json({ error: 'Time slot not available' });    }    const appointment = new Appointment({      doctorId: req.user.id,      patientId: patientId,      date,      time,      reason,      status: 'scheduled'    });    await appointment.save();    await Patient.findByIdAndUpdate(      patientId,      { $push: { appointments: appointment._id } },      { new: true }    );    res.json({ message: 'Appointment scheduled successfully' });  } catch (error) {    res.status(500).json({ error: 'Server error' });  }});router.put('/appointments/:id', auth, async (req, res) => {  try {    console.log(`Updating appointment ${req.params.id} by doctor ${req.user.id}`);    console.log('Update data:', req.body);    const { status, notes } = req.body;    const appointment = await Appointment.findById(req.params.id);    if (!appointment) {      console.log(`Appointment ${req.params.id} not found`);      return res.status(404).json({ error: 'Appointment not found' });    }    const appointmentDoctorId = String(appointment.doctorId);    const requestingDoctorId = String(req.user.id);    console.log('Appointment doctorId:', appointmentDoctorId);    console.log('Requesting doctor ID:', requestingDoctorId);    appointment.status = status || appointment.status;    if (notes !== undefined) appointment.notes = notes;    const updatedAppointment = await appointment.save();    console.log('Appointment updated successfully:', updatedAppointment._id);    res.json({       message: 'Appointment updated successfully',       appointment: updatedAppointment     });  } catch (error) {    console.error('Error updating appointment:', error);    res.status(500).json({       error: 'Server error',      details: error.message     });  }});router.post('/prescribe-medication', auth, async (req, res) => {  try {    const { patientId, diagnosis, symptoms, medications, notes, followUpDate, appointmentId } = req.body;    const doctorId = req.user.id;    console.log('Request body for prescription:', req.body);    console.log('Doctor ID:', doctorId);    const doctor = await Doctor.findById(doctorId);    if (!doctor || doctor.role !== 'doctor') {      return res.status(401).json({ error: 'Not authorized - must be a doctor' });    }    if (appointmentId) {      console.log('Checking appointment:', appointmentId);      const appointment = await Appointment.findById(appointmentId);      if (!appointment) {        console.log('Appointment not found:', appointmentId);        return res.status(404).json({ error: 'Appointment not found' });      }      console.log('Comparing doctor IDs:', {        appointmentDoctorId: appointment.doctorId.toString(),        requestingDoctorId: doctorId.toString()      });      if (appointment.doctorId.toString() !== doctorId.toString()) {        console.log('Doctor ID mismatch');        return res.status(401).json({ error: 'Not authorized to prescribe for this appointment' });      }      console.log('Appointment status:', appointment.status);      if (!['confirmed', 'pending'].includes(appointment.status)) {        return res.status(400).json({ error: 'Cannot prescribe for cancelled or completed appointments' });      }      console.log('Comparing patient IDs:', {        appointmentPatientId: appointment.patientId.toString(),        requestedPatientId: patientId.toString()      });      if (appointment.patientId.toString() !== patientId.toString()) {        console.log('Patient ID mismatch');        return res.status(400).json({ error: 'Patient ID does not match appointment' });      }    }    if (!patientId || !diagnosis || !medications || !symptoms) {      return res.status(400).json({ error: 'Missing required fields' });    }    if (!Array.isArray(medications) || medications.length === 0) {      return res.status(400).json({ error: 'At least one medication is required' });    }    for (const med of medications) {      if (!med.name || !med.dosage || !med.frequency || !med.duration || !med.timing) {        return res.status(400).json({ error: 'Each medication must have name, dosage, frequency, duration, and timing' });      }    }    let patient = await Patient.findById(patientId);    if (!patient) {      const user = await User.findById(patientId);      if (!user) {        return res.status(404).json({ error: 'Patient not found' });      }      patient = new Patient({        firstName: user.firstName,        lastName: user.lastName,        email: user.email,        phone: user.phone || '',        gender: 'other',        dateOfBirth: new Date(),        bloodType: 'O+',        address: {          street: '',          city: '',          state: '',          zipCode: '',          country: ''        },        emergencyContact: {          name: '',          relationship: '',          phoneNumber: ''        },        medicalHistory: [],        allergies: []      });      await patient.save();    }    const prescription = new Prescription({      patientId: patient._id,      patientModel: 'Patient',      doctorId,      diagnosis,      symptoms,      medications,      notes: notes || '',      followUpDate: followUpDate || null,      status: 'active'    });    const savedPrescription = await prescription.save();    await Patient.findByIdAndUpdate(      patient._id,      { $addToSet: { prescriptions: savedPrescription._id } }    );    if (appointmentId) {      await Appointment.findByIdAndUpdate(        appointmentId,        {           status: 'completed',          notes: `Prescription created: ${diagnosis}`        }      );    }    await savedPrescription.populate('doctorId', 'firstName lastName specialty');    res.status(201).json({      message: 'Prescription created successfully',      prescription: {        _id: savedPrescription._id,        diagnosis: savedPrescription.diagnosis,        symptoms: savedPrescription.symptoms,        medications: savedPrescription.medications,        notes: savedPrescription.notes,        followUpDate: savedPrescription.followUpDate,        status: savedPrescription.status,        doctorId: savedPrescription.doctorId,        patientId: patient._id,        createdAt: savedPrescription.createdAt      }    });  } catch (error) {    console.error('Error creating prescription:', error);    res.status(500).json({      error: 'Server error while creating prescription',      details: error.message    });  }});router.get('/prescriptions', auth, async (req, res) => {  try {    const prescriptions = await Prescription.find({ doctorId: req.user.id });    res.json(prescriptions);  } catch (error) {    console.error('Error fetching prescriptions:', error);    res.status(500).send({ error: 'Server error' });  }});router.put('/prescriptions/:id', auth, async (req, res) => {  try {    const { diagnosis, symptoms, medications, notes, followUpDate } = req.body;    const prescription = await Prescription.findOneAndUpdate(      { _id: req.params.id, doctorId: req.user.id },      { diagnosis, symptoms, medications, notes, followUpDate },      { new: true }    );    if (!prescription) {      return res.status(404).send({ error: 'Prescription not found' });    }    res.json(prescription);  } catch (error) {    console.error('Error updating prescription:', error);    res.status(500).send({ error: 'Server error' });  }});router.delete('/prescriptions/:id', auth, async (req, res) => {  try {    const prescription = await Prescription.findOneAndDelete({ _id: req.params.id, doctorId: req.user.id });    if (!prescription) {      return res.status(404).send({ error: 'Prescription not found' });    }    res.json({ message: 'Prescription deleted successfully' });  } catch (error) {    console.error('Error deleting prescription:', error);    res.status(500).send({ error: 'Server error', details: error.message });  }});router.get('/prescriptions/:patientId', auth, async (req, res) => {  try {    const prescriptions = await Prescription.find({       doctorId: req.user.id,      patientId: req.params.patientId    });    res.json(prescriptions);  } catch (error) {    console.error('Error fetching prescriptions:', error);    res.status(500).send({ error: 'Server error' });  }});router.get('/appointments', auth, async (req, res) => {  try {    console.log('Fetching appointments for doctor ID:', req.user.id);    const doctor = await Doctor.findById(req.user.id);    if (!doctor) {      console.log('Doctor not found with ID:', req.user.id);      return res.status(404).json({ error: 'Doctor not found' });    }    const appointments = await Appointment.find({ doctorId: req.user.id })      .populate({        path: 'patientId',        select: 'firstName lastName email phoneNumber',        model: 'Patient'      })      .sort({ date: 1 });    console.log(`Found ${appointments.length} appointments for doctor ${req.user.id}`);    const formattedAppointments = await Promise.all(appointments.map(async (apt) => {      let patientInfo = {        firstName: 'Unknown',        lastName: 'Patient',        email: '',        phoneNumber: ''      };      try {        if (apt.patientId) {          if (typeof apt.patientId === 'object' && apt.patientId._id) {            patientInfo = {              _id: apt.patientId._id,              firstName: apt.patientId.firstName || 'Unknown',              lastName: apt.patientId.lastName || 'Patient',              email: apt.patientId.email || '',              phoneNumber: apt.patientId.phoneNumber || ''            };          } else {            const patientDoc = await Patient.findById(apt.patientId).select('firstName lastName email phoneNumber');            if (patientDoc) {              patientInfo = {                _id: patientDoc._id,                firstName: patientDoc.firstName || 'Unknown',                lastName: patientDoc.lastName || 'Patient',                email: patientDoc.email || '',                phoneNumber: patientDoc.phoneNumber || ''              };            }          }        }      } catch (err) {        console.error('Error retrieving patient information:', err);      }      return {        _id: apt._id,        date: apt.date,        time: apt.time,        reason: apt.reason || '',        status: apt.status || 'pending',        notes: apt.notes || '',        patientId: patientInfo,        patientName: `${patientInfo.firstName} ${patientInfo.lastName}`.trim() || 'Unknown Patient',        createdAt: apt.createdAt      };    }));    console.log('Formatted appointments with patient names:',       formattedAppointments.map(apt => ({         id: apt._id,         patientName: apt.patientName       }))    );    res.json(formattedAppointments);  } catch (error) {    console.error('Error fetching doctor appointments:', error);    res.status(500).json({ error: 'Server error' });  }});router.get('/patients', auth, async (req, res) => {  try {    const appointments = await Appointment.find({ doctorId: req.user.id })      .populate('patientId');    const patientsMap = {};    appointments.forEach(apt => {      if (apt.patientId && apt.patientId._id) {        patientsMap[apt.patientId._id] = apt.patientId;      }    });    const patients = Object.values(patientsMap);    console.log(`Found ${patients.length} unique patients for doctor ${req.user.id}`);    res.json(patients);  } catch (error) {    res.status(500).json({ error: 'Server error' });  }});router.put('/change-password', auth, async (req, res) => {  try {    const { currentPassword, newPassword } = req.body;    const doctor = await Doctor.findById(req.user.id);    if (!doctor) {      return res.status(404).json({ error: 'Doctor not found' });    }    const isMatch = await bcrypt.compare(currentPassword, doctor.password);    if (!isMatch) {      return res.status(400).json({ error: 'Current password is incorrect' });    }    doctor.password = newPassword;    await doctor.save();    res.json({ message: 'Password updated successfully' });  } catch (error) {    console.error('Error changing password:', error);    res.status(500).json({ error: 'Server error' });  }});router.get('/dashboard', auth, async (req, res) => {  try {    console.log('Fetching dashboard data for doctor:', req.user.id);    const doctor = await Doctor.findById(req.user.id);    if (!doctor) {      console.log('Doctor not found with ID:', req.user.id);      return res.status(404).json({ error: 'Doctor not found' });    }    const allAppointments = await Appointment.find({ doctorId: req.user.id })      .populate({        path: 'patientId',        select: 'firstName lastName email phoneNumber',        model: 'Patient'      })      .sort({ date: 1 });    const total = allAppointments.length;    const confirmed = allAppointments.filter(apt => apt.status === 'confirmed').length;    const pending = allAppointments.filter(apt => apt.status === 'pending').length;    const cancelled = allAppointments.filter(apt => apt.status === 'cancelled').length;    const today = new Date();    today.setHours(0, 0, 0, 0);    const tomorrow = new Date(today);    tomorrow.setDate(tomorrow.getDate() + 1);    const todayAppointments = allAppointments.filter(apt => {      const aptDate = new Date(apt.date);      return aptDate >= today && aptDate < tomorrow;    });    const formattedTodayAppointments = todayAppointments.map(apt => {      let patientInfo = null;      let patientName = 'Unknown Patient';      if (apt.patientId) {        if (typeof apt.patientId === 'object') {          patientInfo = {            _id: apt.patientId._id,            firstName: apt.patientId.firstName || '',            lastName: apt.patientId.lastName || '',            email: apt.patientId.email || '',            phoneNumber: apt.patientId.phoneNumber || ''          };          patientName = `${patientInfo.firstName} ${patientInfo.lastName}`.trim() || 'Unknown Patient';        }      }      return {        _id: apt._id,        date: apt.date,        time: apt.time,        reason: apt.reason || '',        status: apt.status || 'pending',        patientName: patientName,        patientId: patientInfo,        patientEmail: patientInfo ? patientInfo.email : '',        patientPhone: patientInfo ? patientInfo.phoneNumber : ''      };    });    const dashboardData = {      stats: {        total,        confirmed,         pending,        cancelled      },      todayAppointments: formattedTodayAppointments    };    console.log(`Sending dashboard data with ${total} total appointments and ${formattedTodayAppointments.length} today's appointments`);    res.json(dashboardData);  } catch (error) {    console.error('Error fetching doctor dashboard data:', error);    res.status(500).json({ error: 'Error fetching dashboard data' });  }});module.exports = router;