const express = require('express');const router = express.Router();const MedicalRecord = require('../models/MedicalRecord');const auth = require('../middleware/auth');router.get('/', auth, async (req, res) => {  try {    const records = await MedicalRecord.find()      .populate('doctorId', 'name specialization')      .sort({ updatedAt: -1 });    res.json(records);  } catch (error) {    res.status(500).json({ message: error.message });  }});router.get('/:id', auth, async (req, res) => {  try {    const record = await MedicalRecord.findById(req.params.id)      .populate('doctorId', 'name specialization');    if (!record) {      return res.status(404).json({ message: 'Medical record not found' });    }    res.json(record);  } catch (error) {    res.status(500).json({ message: error.message });  }});router.get('/search/:query', auth, async (req, res) => {  try {    const records = await MedicalRecord.find({      patientName: { $regex: req.params.query, $options: 'i' }    })      .populate('doctorId', 'name specialization')      .sort({ updatedAt: -1 });    res.json(records);  } catch (error) {    res.status(500).json({ message: error.message });  }});router.post('/', auth, async (req, res) => {  try {    const record = new MedicalRecord({      ...req.body,      lastUpdated: new Date()    });    const newRecord = await record.save();    await newRecord.populate('doctorId', 'name specialization');    res.status(201).json(newRecord);  } catch (error) {    res.status(400).json({ message: error.message });  }});router.put('/:id', auth, async (req, res) => {  try {    const record = await MedicalRecord.findById(req.params.id);    if (!record) {      return res.status(404).json({ message: 'Medical record not found' });    }    Object.assign(record, {      ...req.body,      lastUpdated: new Date()    });    const updatedRecord = await record.save();    await updatedRecord.populate('doctorId', 'name specialization');    res.json(updatedRecord);  } catch (error) {    res.status(400).json({ message: error.message });  }});router.delete('/:id', auth, async (req, res) => {  try {    const record = await MedicalRecord.findById(req.params.id);    if (!record) {      return res.status(404).json({ message: 'Medical record not found' });    }    await record.remove();    res.json({ message: 'Medical record deleted' });  } catch (error) {    res.status(500).json({ message: error.message });  }});router.post('/:id/vitals', auth, async (req, res) => {  try {    const record = await MedicalRecord.findById(req.params.id);    if (!record) {      return res.status(404).json({ message: 'Medical record not found' });    }    record.vitalSigns.push({      ...req.body,      date: new Date()    });    record.lastUpdated = new Date();    const updatedRecord = await record.save();    await updatedRecord.populate('doctorId', 'name specialization');    res.json(updatedRecord);  } catch (error) {    res.status(400).json({ message: error.message });  }});router.post('/:id/attachments', auth, async (req, res) => {  try {    const record = await MedicalRecord.findById(req.params.id);    if (!record) {      return res.status(404).json({ message: 'Medical record not found' });    }    record.attachments.push({      ...req.body,      uploadDate: new Date()    });    record.lastUpdated = new Date();    const updatedRecord = await record.save();    await updatedRecord.populate('doctorId', 'name specialization');    res.json(updatedRecord);  } catch (error) {    res.status(400).json({ message: error.message });  }});router.get('/:id/vitals', auth, async (req, res) => {  try {    const record = await MedicalRecord.findById(req.params.id);    if (!record) {      return res.status(404).json({ message: 'Medical record not found' });    }    res.json(record.vitalSigns.sort((a, b) => b.date - a.date));  } catch (error) {    res.status(500).json({ message: error.message });  }});router.get('/:id/attachments', auth, async (req, res) => {  try {    const record = await MedicalRecord.findById(req.params.id);    if (!record) {      return res.status(404).json({ message: 'Medical record not found' });    }    res.json(record.attachments.sort((a, b) => b.uploadDate - a.uploadDate));  } catch (error) {    res.status(500).json({ message: error.message });  }});module.exports = router; 