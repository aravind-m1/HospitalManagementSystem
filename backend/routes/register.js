const express = require('express');const User = require('../models/User');const Doctor = require('../models/Doctor');const Admin = require('../models/Admin');const bcrypt = require('bcrypt');const jwt = require('jsonwebtoken');const router = express.Router();router.post('/', async (req, res) => {  const { firstName, lastName, email, password, role, phone } = req.body;  try {    if (!firstName || !lastName || !email || !password || !role || !phone) {      return res.status(400).json({        error: 'Please provide all required fields'      });    }    const existingUser = await Promise.all([      User.findOne({ email: email.toLowerCase() }),      Doctor.findOne({ email: email.toLowerCase() }),      Admin.findOne({ email: email.toLowerCase() })    ]);    if (existingUser.some(user => user !== null)) {      return res.status(400).json({        error: 'Email already exists'      });    }    const salt = await bcrypt.genSalt(10);    const hashedPassword = await bcrypt.hash(password, salt);    let user;    const userData = {      firstName: firstName.trim(),      lastName: lastName.trim(),      email: email.toLowerCase(),      password: hashedPassword,      phone: phone.trim(),      role    };    switch (role) {      case 'doctor':        user = new Doctor(userData);        break;      case 'admin':        user = new Admin(userData);        break;      case 'patient':        user = new User(userData);        break;      default:        return res.status(400).json({          error: 'Invalid role specified'        });    }    await user.save();    const token = jwt.sign(      {        id: user._id,        role: role,        email: user.email      },      process.env.JWT_SECRET || 'your_jwt_secret',      { expiresIn: '24h' }    );    res.status(201).json({      success: true,      token,      role: role,      user: {        id: user._id,        email: user.email,        firstName: user.firstName,        lastName: user.lastName,        role: role      }    });  } catch (error) {    console.error('Registration error:', error);    res.status(500).json({      error: 'An error occurred during registration. Please try again.'    });  }});module.exports = router; 