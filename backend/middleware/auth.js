const jwt = require('jsonwebtoken');const Admin = require('../models/Admin');const Doctor = require('../models/Doctor');const User = require('../models/User');const auth = async (req, res, next) => {  try {    const token = req.header('Authorization')?.replace('Bearer ', '');    if (!token) {      console.log('Auth failed: No token provided');      return res.status(401).json({ error: 'No authentication token, access denied' });    }    const jwtSecret = process.env.JWT_SECRET || 'your_jwt_secret';    const decoded = jwt.verify(token, jwtSecret);    console.log(`Auth: Verified token for user ID ${decoded.id}, role ${decoded.role}`);    let user;    if (decoded.role === 'admin') {      user = await Admin.findById(decoded.id);    } else if (decoded.role === 'doctor') {      user = await Doctor.findById(decoded.id);      if (user) console.log(`Found doctor: ${user.firstName} ${user.lastName}`);    } else {      user = await User.findById(decoded.id);    }    if (!user) {      console.log(`Auth failed: User not found for ID ${decoded.id}, role ${decoded.role}`);      throw new Error('User not found');    }    req.user = {      id: user._id,      email: user.email,      role: decoded.role,      firstName: user.firstName,      lastName: user.lastName    };    next();  } catch (error) {    console.error('Auth middleware error:', error.message);    if (error.name === 'JsonWebTokenError') {      return res.status(401).json({ error: 'Invalid token' });    } else if (error.name === 'TokenExpiredError') {      return res.status(401).json({ error: 'Token expired' });    }    res.status(401).json({ error: 'Authentication failed' });  }};module.exports = auth; 